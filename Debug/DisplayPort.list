
DisplayPort.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e4c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f8c  08004f8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f8c  08004f8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f8c  08004f8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08004fa0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004fa0  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff60  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002951  00000000  00000000  0002ff94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  000328e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00033530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016221  00000000  00000000  00034050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121e9  00000000  00000000  0004a271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ba4  00000000  00000000  0005c45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000deffe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ec  00000000  00000000  000df050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004eec 	.word	0x08004eec

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004eec 	.word	0x08004eec

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <setDp>:
#include <stdbool.h>
#include "Drivers/dp_switch.h"
#include<gpio.h>

void setDp(dpSwitch_t dp)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	701a      	strb	r2, [r3, #0]
	switch (dp)
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d002      	beq.n	8000406 <setDp+0x1a>
 8000400:	2b01      	cmp	r3, #1
 8000402:	d004      	beq.n	800040e <setDp+0x22>
	case DP2:
		gpioToSwitchDP(true);
		break;
	
	default:
		break;
 8000404:	e007      	b.n	8000416 <setDp+0x2a>
		gpioToSwitchDP(false);
 8000406:	2000      	movs	r0, #0
 8000408:	f000 f970 	bl	80006ec <gpioToSwitchDP>
		break;
 800040c:	e003      	b.n	8000416 <setDp+0x2a>
		gpioToSwitchDP(true);
 800040e:	2001      	movs	r0, #1
 8000410:	f000 f96c 	bl	80006ec <gpioToSwitchDP>
		break;
 8000414:	46c0      	nop			; (mov r8, r8)
	}
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}

0800041e <eqInit>:
#include "i2c.h"

uint8_t eqGain = 0;

eqI2CStatus_t eqInit()
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
	data |= (1 << 4) | (1 << 1); //EQ set by regisetrs and DP enable
 800042a:	1dfb      	adds	r3, r7, #7
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2212      	movs	r2, #18
 8000430:	4313      	orrs	r3, r2
 8000432:	b2da      	uxtb	r2, r3
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	701a      	strb	r2, [r3, #0]
	if(eqI2CWrite(EQ_ADDRESS, EQ_GENERAL_REG, &data) != HAL_OK){
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	001a      	movs	r2, r3
 800043c:	210a      	movs	r1, #10
 800043e:	200f      	movs	r0, #15
 8000440:	f000 fac6 	bl	80009d0 <eqI2CWrite>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <eqInit+0x2e>
		return EQ_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	e01c      	b.n	8000486 <eqInit+0x68>
	}
	data = 0; //AUX, DP line 1,2,3 and 4 are enable
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	if(eqI2CWrite(EQ_ADDRESS, EQ_CONTROL_REG, &data) != HAL_OK){
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	001a      	movs	r2, r3
 8000456:	2113      	movs	r1, #19
 8000458:	200f      	movs	r0, #15
 800045a:	f000 fab9 	bl	80009d0 <eqI2CWrite>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <eqInit+0x48>
		return EQ_ERROR;
 8000462:	2301      	movs	r3, #1
 8000464:	e00f      	b.n	8000486 <eqInit+0x68>
	}
	data = 0;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
	eqI2CWrite(EQ_ADDRESS, EQ_FOR1_2_LINES_REG, &data);
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	001a      	movs	r2, r3
 8000470:	2110      	movs	r1, #16
 8000472:	200f      	movs	r0, #15
 8000474:	f000 faac 	bl	80009d0 <eqI2CWrite>
	eqI2CWrite(EQ_ADDRESS, EQ_FOR3_4_LINES_REG, &data);
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	001a      	movs	r2, r3
 800047c:	2111      	movs	r1, #17
 800047e:	200f      	movs	r0, #15
 8000480:	f000 faa6 	bl	80009d0 <eqI2CWrite>

	return EQ_OK;
 8000484:	2300      	movs	r3, #0
}
 8000486:	0018      	movs	r0, r3
 8000488:	46bd      	mov	sp, r7
 800048a:	b002      	add	sp, #8
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <eqGainSet>:

eqI2CStatus_t eqGainSet(eqGainSet_t set)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	0002      	movs	r2, r0
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	701a      	strb	r2, [r3, #0]
	uint8_t eqGain1And2Lines = 0;
 800049c:	210f      	movs	r1, #15
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
	uint8_t eqGain3And4Lines = 0;
 80004a4:	230e      	movs	r3, #14
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]

	if(eqI2CRead(EQ_ADDRESS, EQ_FOR1_2_LINES_REG, &eqGain1And2Lines) != HAL_OK) {
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	001a      	movs	r2, r3
 80004b0:	2110      	movs	r1, #16
 80004b2:	200f      	movs	r0, #15
 80004b4:	f000 fa4c 	bl	8000950 <eqI2CRead>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <eqGainSet+0x30>
		return EQ_ERROR;
 80004bc:	2301      	movs	r3, #1
 80004be:	e057      	b.n	8000570 <eqGainSet+0xe0>
	}
	if(eqI2CRead(EQ_ADDRESS, EQ_FOR3_4_LINES_REG, &eqGain3And4Lines) != HAL_OK) {
 80004c0:	230e      	movs	r3, #14
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	001a      	movs	r2, r3
 80004c6:	2111      	movs	r1, #17
 80004c8:	200f      	movs	r0, #15
 80004ca:	f000 fa41 	bl	8000950 <eqI2CRead>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <eqGainSet+0x46>
		return EQ_ERROR;
 80004d2:	2301      	movs	r3, #1
 80004d4:	e04c      	b.n	8000570 <eqGainSet+0xe0>
	}
	if(eqGain1And2Lines != eqGain3And4Lines)
 80004d6:	210f      	movs	r1, #15
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	200e      	movs	r0, #14
 80004de:	183b      	adds	r3, r7, r0
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d00f      	beq.n	8000506 <eqGainSet+0x76>
	{
		if(eqGain1And2Lines < eqGain3And4Lines) {
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	183b      	adds	r3, r7, r0
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d204      	bcs.n	80004fc <eqGainSet+0x6c>
			eqGain = eqGain1And2Lines;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <eqGainSet+0xe8>)
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	e004      	b.n	8000506 <eqGainSet+0x76>
		}
		else {
			eqGain = eqGain3And4Lines;
 80004fc:	230e      	movs	r3, #14
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <eqGainSet+0xe8>)
 8000504:	701a      	strb	r2, [r3, #0]
		}
	}
	if((set == EQ_UP) && (eqGain < MAX_EQ_GAIN)) {
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d10a      	bne.n	8000524 <eqGainSet+0x94>
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <eqGainSet+0xe8>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b0e      	cmp	r3, #14
 8000514:	d806      	bhi.n	8000524 <eqGainSet+0x94>
		eqGain++;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <eqGainSet+0xe8>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <eqGainSet+0xe8>)
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e010      	b.n	8000546 <eqGainSet+0xb6>
	}
	else if((set == EQ_DOWN) && (eqGain > MIN_EQ_GAIN)) {
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10a      	bne.n	8000542 <eqGainSet+0xb2>
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <eqGainSet+0xe8>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d006      	beq.n	8000542 <eqGainSet+0xb2>
		eqGain--;
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <eqGainSet+0xe8>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	3b01      	subs	r3, #1
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <eqGainSet+0xe8>)
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	e001      	b.n	8000546 <eqGainSet+0xb6>
	}
	else {
		return EQ_ERROR_GAIN_CANNOT_SET;
 8000542:	2302      	movs	r3, #2
 8000544:	e014      	b.n	8000570 <eqGainSet+0xe0>
	}

	if(eqI2CWrite(EQ_ADDRESS, EQ_FOR1_2_LINES_REG, &eqGain) != HAL_OK) {
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <eqGainSet+0xe8>)
 8000548:	001a      	movs	r2, r3
 800054a:	2110      	movs	r1, #16
 800054c:	200f      	movs	r0, #15
 800054e:	f000 fa3f 	bl	80009d0 <eqI2CWrite>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <eqGainSet+0xca>
		return EQ_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00a      	b.n	8000570 <eqGainSet+0xe0>
	}
	if(eqI2CWrite(EQ_ADDRESS, EQ_FOR3_4_LINES_REG, &eqGain) != HAL_OK) {
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <eqGainSet+0xe8>)
 800055c:	001a      	movs	r2, r3
 800055e:	2111      	movs	r1, #17
 8000560:	200f      	movs	r0, #15
 8000562:	f000 fa35 	bl	80009d0 <eqI2CWrite>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <eqGainSet+0xde>
		return EQ_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e000      	b.n	8000570 <eqGainSet+0xe0>
	}
	return EQ_OK;
 800056e:	2300      	movs	r3, #0
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b004      	add	sp, #16
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000028 	.word	0x20000028

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_DMA_Init+0x38>)
 8000584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_DMA_Init+0x38>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	639a      	str	r2, [r3, #56]	; 0x38
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_DMA_Init+0x38>)
 8000590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2009      	movs	r0, #9
 80005a0:	f000 fdac 	bl	80010fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a4:	2009      	movs	r0, #9
 80005a6:	f000 fdbe 	bl	8001126 <HAL_NVIC_EnableIRQ>

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_GPIO_Init>:
*/

volatile buttons_t buttons;

void MX_GPIO_Init(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	; 0x24
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	240c      	movs	r4, #12
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f004 fc87 	bl	8004edc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <MX_GPIO_Init+0x12c>)
 80005d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d2:	4b44      	ldr	r3, [pc, #272]	; (80006e4 <MX_GPIO_Init+0x12c>)
 80005d4:	2102      	movs	r1, #2
 80005d6:	430a      	orrs	r2, r1
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
 80005da:	4b42      	ldr	r3, [pc, #264]	; (80006e4 <MX_GPIO_Init+0x12c>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005de:	2202      	movs	r2, #2
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <MX_GPIO_Init+0x12c>)
 80005e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ea:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <MX_GPIO_Init+0x12c>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	430a      	orrs	r2, r1
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
 80005f2:	4b3c      	ldr	r3, [pc, #240]	; (80006e4 <MX_GPIO_Init+0x12c>)
 80005f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f6:	2201      	movs	r2, #1
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(GPIOB, RESET_USB_Pin|WAKEUP_USB_Pin, GPIO_PIN_SET);

  HAL_GPIO_WritePin(GPIOB, WAKEUP_USB_Pin, GPIO_PIN_SET);
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	4839      	ldr	r0, [pc, #228]	; (80006e8 <MX_GPIO_Init+0x130>)
 8000604:	2201      	movs	r2, #1
 8000606:	0019      	movs	r1, r3
 8000608:	f001 f972 	bl	80018f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RESET_USB_Pin, GPIO_PIN_SET);
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4835      	ldr	r0, [pc, #212]	; (80006e8 <MX_GPIO_Init+0x130>)
 8000612:	2201      	movs	r2, #1
 8000614:	0019      	movs	r1, r3
 8000616:	f001 f96b 	bl	80018f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, WAKEUP_USB_Pin, GPIO_PIN_RESET);
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4832      	ldr	r0, [pc, #200]	; (80006e8 <MX_GPIO_Init+0x130>)
 8000620:	2200      	movs	r2, #0
 8000622:	0019      	movs	r1, r3
 8000624:	f001 f964 	bl	80018f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RESET_USB_Pin, GPIO_PIN_RESET);
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	482e      	ldr	r0, [pc, #184]	; (80006e8 <MX_GPIO_Init+0x130>)
 800062e:	2200      	movs	r2, #0
 8000630:	0019      	movs	r1, r3
 8000632:	f001 f95d 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DP_SEL_GPIO_Port, DP_SEL_Pin, GPIO_PIN_RESET);
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	0219      	lsls	r1, r3, #8
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2200      	movs	r2, #0
 8000640:	0018      	movs	r0, r3
 8000642:	f001 f955 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RESET_USB_Pin|WAKEUP_USB_Pin;
 8000646:	193b      	adds	r3, r7, r4
 8000648:	22c0      	movs	r2, #192	; 0xc0
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2201      	movs	r2, #1
 8000652:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2203      	movs	r2, #3
 800065e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	193b      	adds	r3, r7, r4
 8000662:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <MX_GPIO_Init+0x130>)
 8000664:	0019      	movs	r1, r3
 8000666:	0010      	movs	r0, r2
 8000668:	f000 ffde 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EQ_P_Pin|SET_LCD_Pin|EQ_M_Pin;
 800066c:	0021      	movs	r1, r4
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2284      	movs	r2, #132	; 0x84
 8000678:	0392      	lsls	r2, r2, #14
 800067a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2201      	movs	r2, #1
 8000680:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	000c      	movs	r4, r1
 8000684:	187b      	adds	r3, r7, r1
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <MX_GPIO_Init+0x130>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f000 ffcc 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DP_SEL_Pin;
 8000690:	0021      	movs	r1, r4
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	0212      	lsls	r2, r2, #8
 8000698:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2203      	movs	r2, #3
 80006aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DP_SEL_GPIO_Port, &GPIO_InitStruct);
 80006ac:	187a      	adds	r2, r7, r1
 80006ae:	23a0      	movs	r3, #160	; 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 ffb7 	bl	8001628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2005      	movs	r0, #5
 80006c0:	f000 fd1c 	bl	80010fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006c4:	2005      	movs	r0, #5
 80006c6:	f000 fd2e 	bl	8001126 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2006      	movs	r0, #6
 80006d0:	f000 fd14 	bl	80010fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80006d4:	2006      	movs	r0, #6
 80006d6:	f000 fd26 	bl	8001126 <HAL_NVIC_EnableIRQ>

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b009      	add	sp, #36	; 0x24
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000
 80006e8:	50000400 	.word	0x50000400

080006ec <gpioToSwitchDP>:
//
void gpioToSwitchDP(bool dp)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	0002      	movs	r2, r0
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	701a      	strb	r2, [r3, #0]
  if(dp){
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d008      	beq.n	8000712 <gpioToSwitchDP+0x26>
    HAL_GPIO_WritePin(DP_SEL_GPIO_Port, DP_SEL_Pin, GPIO_PIN_SET);
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	0219      	lsls	r1, r3, #8
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	2201      	movs	r2, #1
 800070a:	0018      	movs	r0, r3
 800070c:	f001 f8f0 	bl	80018f0 <HAL_GPIO_WritePin>
  }
  else{
    HAL_GPIO_WritePin(DP_SEL_GPIO_Port, DP_SEL_Pin, GPIO_PIN_SET);
  }

}
 8000710:	e007      	b.n	8000722 <gpioToSwitchDP+0x36>
    HAL_GPIO_WritePin(DP_SEL_GPIO_Port, DP_SEL_Pin, GPIO_PIN_SET);
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	0219      	lsls	r1, r3, #8
 8000716:	23a0      	movs	r3, #160	; 0xa0
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	2201      	movs	r2, #1
 800071c:	0018      	movs	r0, r3
 800071e:	f001 f8e7 	bl	80018f0 <HAL_GPIO_WritePin>
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <buttonsInit>:

void buttonsInit()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  buttons.eqGainUp = false;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <buttonsInit+0x1c>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
  buttons.dpSwitch = false;
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <buttonsInit+0x1c>)
 8000738:	2200      	movs	r2, #0
 800073a:	709a      	strb	r2, [r3, #2]
  buttons.eqGainDown = false;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <buttonsInit+0x1c>)
 800073e:	2200      	movs	r2, #0
 8000740:	705a      	strb	r2, [r3, #1]
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000002c 	.word	0x2000002c

0800074c <buttonsGetState>:

bool buttonsGetState(buttonsState_t state)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	0002      	movs	r2, r0
 8000754:	1dfb      	adds	r3, r7, #7
 8000756:	701a      	strb	r2, [r3, #0]
  switch(state)
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d00d      	beq.n	800077c <buttonsGetState+0x30>
 8000760:	dc10      	bgt.n	8000784 <buttonsGetState+0x38>
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <buttonsGetState+0x20>
 8000766:	2b01      	cmp	r3, #1
 8000768:	d004      	beq.n	8000774 <buttonsGetState+0x28>
 800076a:	e00b      	b.n	8000784 <buttonsGetState+0x38>
  {
    case EQ_GAIN_UP:
      return buttons.eqGainUp;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <buttonsGetState+0x44>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	e008      	b.n	8000786 <buttonsGetState+0x3a>
      break;
    case EQ_GAIN_DOWN:
      return buttons.eqGainDown;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <buttonsGetState+0x44>)
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	e004      	b.n	8000786 <buttonsGetState+0x3a>
      break;
    case DP_SWITCH:
      return buttons.dpSwitch;
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <buttonsGetState+0x44>)
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	e000      	b.n	8000786 <buttonsGetState+0x3a>
      break;
    default:
      return false;
 8000784:	2300      	movs	r3, #0
  }
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	2000002c 	.word	0x2000002c

08000794 <buttonsResetState>:

void buttonsResetState()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  buttons.eqGainUp = false;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <buttonsResetState+0x1c>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
  buttons.eqGainDown = false;
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <buttonsResetState+0x1c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	705a      	strb	r2, [r3, #1]
  buttons.dpSwitch = false;
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <buttonsResetState+0x1c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	709a      	strb	r2, [r3, #2]
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000002c 	.word	0x2000002c

080007b4 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	0002      	movs	r2, r0
 80007bc:	1dbb      	adds	r3, r7, #6
 80007be:	801a      	strh	r2, [r3, #0]
	switch(GPIO_Pin)
 80007c0:	1dbb      	adds	r3, r7, #6
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d00d      	beq.n	80007e4 <HAL_GPIO_EXTI_Falling_Callback+0x30>
 80007c8:	dc10      	bgt.n	80007ec <HAL_GPIO_EXTI_Falling_Callback+0x38>
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d002      	beq.n	80007d4 <HAL_GPIO_EXTI_Falling_Callback+0x20>
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d004      	beq.n	80007dc <HAL_GPIO_EXTI_Falling_Callback+0x28>
			break;
		case EQ_M_Pin:
      buttons.eqGainDown = true;
			break;
		default:
			break;
 80007d2:	e00b      	b.n	80007ec <HAL_GPIO_EXTI_Falling_Callback+0x38>
      buttons.eqGainUp = true;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
			break;
 80007da:	e008      	b.n	80007ee <HAL_GPIO_EXTI_Falling_Callback+0x3a>
      buttons.dpSwitch = true;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 80007de:	2201      	movs	r2, #1
 80007e0:	709a      	strb	r2, [r3, #2]
			break;
 80007e2:	e004      	b.n	80007ee <HAL_GPIO_EXTI_Falling_Callback+0x3a>
      buttons.eqGainDown = true;
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	705a      	strb	r2, [r3, #1]
			break;
 80007ea:	e000      	b.n	80007ee <HAL_GPIO_EXTI_Falling_Callback+0x3a>
			break;
 80007ec:	46c0      	nop			; (mov r8, r8)
	}
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	2000002c 	.word	0x2000002c

080007fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_I2C1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <MX_I2C1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_I2C1_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <MX_I2C1_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_I2C1_Init+0x74>)
 8000814:	2201      	movs	r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_I2C1_Init+0x74>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 f8ab 	bl	8001994 <HAL_I2C_Init>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000842:	f000 f990 	bl	8000b66 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_I2C1_Init+0x74>)
 8000848:	2100      	movs	r1, #0
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fbb6 	bl	8002fbc <HAL_I2CEx_ConfigAnalogFilter>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000854:	f000 f987 	bl	8000b66 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <MX_I2C1_Init+0x74>)
 800085a:	2100      	movs	r1, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f002 fbf9 	bl	8003054 <HAL_I2CEx_ConfigDigitalFilter>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 f97e 	bl	8000b66 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000030 	.word	0x20000030
 8000874:	40005400 	.word	0x40005400
 8000878:	00602173 	.word	0x00602173

0800087c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b091      	sub	sp, #68	; 0x44
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	232c      	movs	r3, #44	; 0x2c
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	0018      	movs	r0, r3
 800088a:	2314      	movs	r3, #20
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f004 fb24 	bl	8004edc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000894:	2414      	movs	r4, #20
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	2318      	movs	r3, #24
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f004 fb1c 	bl	8004edc <memset>
  if(i2cHandle->Instance==I2C1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a26      	ldr	r2, [pc, #152]	; (8000944 <HAL_I2C_MspInit+0xc8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d145      	bne.n	800093a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2220      	movs	r2, #32
 80008b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	f003 f91b 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008c6:	f000 f94e 	bl	8000b66 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <HAL_I2C_MspInit+0xcc>)
 80008cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <HAL_I2C_MspInit+0xcc>)
 80008d0:	2102      	movs	r1, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_I2C_MspInit+0xcc>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008da:	2202      	movs	r2, #2
 80008dc:	4013      	ands	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008e2:	212c      	movs	r1, #44	; 0x2c
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	22c0      	movs	r2, #192	; 0xc0
 80008e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2212      	movs	r2, #18
 80008ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2206      	movs	r2, #6
 8000900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	187b      	adds	r3, r7, r1
 8000904:	4a11      	ldr	r2, [pc, #68]	; (800094c <HAL_I2C_MspInit+0xd0>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f000 fe8d 	bl	8001628 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_I2C_MspInit+0xcc>)
 8000910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_I2C_MspInit+0xcc>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0389      	lsls	r1, r1, #14
 8000918:	430a      	orrs	r2, r1
 800091a:	63da      	str	r2, [r3, #60]	; 0x3c
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_I2C_MspInit+0xcc>)
 800091e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	039b      	lsls	r3, r3, #14
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2017      	movs	r0, #23
 8000930:	f000 fbe4 	bl	80010fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000934:	2017      	movs	r0, #23
 8000936:	f000 fbf6 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b011      	add	sp, #68	; 0x44
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40005400 	.word	0x40005400
 8000948:	40021000 	.word	0x40021000
 800094c:	50000400 	.word	0x50000400

08000950 <eqI2CRead>:

HAL_StatusTypeDef eqI2CRead(uint8_t address, uint8_t reg, uint8_t *data)
{
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af02      	add	r7, sp, #8
 8000956:	603a      	str	r2, [r7, #0]
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	1c02      	adds	r2, r0, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	1dbb      	adds	r3, r7, #6
 8000960:	1c0a      	adds	r2, r1, #0
 8000962:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000964:	200f      	movs	r0, #15
 8000966:	183b      	adds	r3, r7, r0
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
  status = HAL_I2C_Master_Transmit(&hi2c1, address<<1, &reg, 1, 10000);
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b29b      	uxth	r3, r3
 8000972:	18db      	adds	r3, r3, r3
 8000974:	b299      	uxth	r1, r3
 8000976:	0005      	movs	r5, r0
 8000978:	183c      	adds	r4, r7, r0
 800097a:	1dba      	adds	r2, r7, #6
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <eqI2CRead+0x78>)
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <eqI2CRead+0x7c>)
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	f001 f89c 	bl	8001ac0 <HAL_I2C_Master_Transmit>
 8000988:	0003      	movs	r3, r0
 800098a:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800098c:	197b      	adds	r3, r7, r5
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <eqI2CRead+0x4a>
  {
    return status;
 8000994:	197b      	adds	r3, r7, r5
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	e011      	b.n	80009be <eqI2CRead+0x6e>
  }
	status = HAL_I2C_Master_Receive(&hi2c1,address<<1, data, 1, 10000);
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	18db      	adds	r3, r3, r3
 80009a2:	b299      	uxth	r1, r3
 80009a4:	250f      	movs	r5, #15
 80009a6:	197c      	adds	r4, r7, r5
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <eqI2CRead+0x78>)
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <eqI2CRead+0x7c>)
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	f001 f98d 	bl	8001cd0 <HAL_I2C_Master_Receive>
 80009b6:	0003      	movs	r3, r0
 80009b8:	7023      	strb	r3, [r4, #0]
  return status;
 80009ba:	197b      	adds	r3, r7, r5
 80009bc:	781b      	ldrb	r3, [r3, #0]
}
 80009be:	0018      	movs	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b004      	add	sp, #16
 80009c4:	bdb0      	pop	{r4, r5, r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000030 	.word	0x20000030
 80009cc:	00002710 	.word	0x00002710

080009d0 <eqI2CWrite>:

HAL_StatusTypeDef eqI2CWrite(uint8_t address, uint8_t reg, uint8_t *data)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	603a      	str	r2, [r7, #0]
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	1c02      	adds	r2, r0, #0
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	1c0a      	adds	r2, r1, #0
 80009e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009e4:	200f      	movs	r0, #15
 80009e6:	183b      	adds	r3, r7, r0
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
  status = HAL_I2C_Master_Transmit(&hi2c1, address<<1, &reg, 1, 10000);
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	18db      	adds	r3, r3, r3
 80009f4:	b299      	uxth	r1, r3
 80009f6:	0005      	movs	r5, r0
 80009f8:	183c      	adds	r4, r7, r0
 80009fa:	1dba      	adds	r2, r7, #6
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <eqI2CWrite+0x48>)
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <eqI2CWrite+0x4c>)
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	f001 f85c 	bl	8001ac0 <HAL_I2C_Master_Transmit>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	7023      	strb	r3, [r4, #0]
  return status;
 8000a0c:	197b      	adds	r3, r7, r5
 8000a0e:	781b      	ldrb	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b004      	add	sp, #16
 8000a16:	bdb0      	pop	{r4, r5, r7, pc}
 8000a18:	20000030 	.word	0x20000030
 8000a1c:	00002710 	.word	0x00002710

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  dpSwitch_t dp = DP1;
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f000 fa34 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f83f 	bl	8000ab2 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff fdc0 	bl	80005b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a38:	f7ff fda0 	bl	800057c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a3c:	f000 f91c 	bl	8000c78 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a40:	f7ff fedc 	bl	80007fc <MX_I2C1_Init>

  buttonsInit();
 8000a44:	f7ff fe72 	bl	800072c <buttonsInit>
  eqInit();
 8000a48:	f7ff fce9 	bl	800041e <eqInit>
  setDp(dp);
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fccb 	bl	80003ec <setDp>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(buttonsGetState(EQ_GAIN_UP)){
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fe78 	bl	800074c <buttonsGetState>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d005      	beq.n	8000a6c <main+0x4c>
      eqGainSet(EQ_UP);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fd15 	bl	8000490 <eqGainSet>
      buttonsResetState();
 8000a66:	f7ff fe95 	bl	8000794 <buttonsResetState>
 8000a6a:	e7f4      	b.n	8000a56 <main+0x36>
    }
    else if(buttonsGetState(EQ_GAIN_DOWN)){
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fe6d 	bl	800074c <buttonsGetState>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d005      	beq.n	8000a82 <main+0x62>
      eqGainSet(EQ_DOWN);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fd0a 	bl	8000490 <eqGainSet>
      buttonsResetState();
 8000a7c:	f7ff fe8a 	bl	8000794 <buttonsResetState>
 8000a80:	e7e9      	b.n	8000a56 <main+0x36>
    }
    else if(buttonsGetState(DP_SWITCH)){
 8000a82:	2002      	movs	r0, #2
 8000a84:	f7ff fe62 	bl	800074c <buttonsGetState>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d0e4      	beq.n	8000a56 <main+0x36>
      if(dp == DP1) {
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d103      	bne.n	8000a9c <main+0x7c>
        dp = DP2;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e002      	b.n	8000aa2 <main+0x82>
      }
      else {
        dp = DP1;
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
      }
      setDp(dp);
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fca0 	bl	80003ec <setDp>
      buttonsResetState();
 8000aac:	f7ff fe72 	bl	8000794 <buttonsResetState>
    if(buttonsGetState(EQ_GAIN_UP)){
 8000ab0:	e7d1      	b.n	8000a56 <main+0x36>

08000ab2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab2:	b590      	push	{r4, r7, lr}
 8000ab4:	b093      	sub	sp, #76	; 0x4c
 8000ab6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab8:	2414      	movs	r4, #20
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0018      	movs	r0, r3
 8000abe:	2334      	movs	r3, #52	; 0x34
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f004 fa0a 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	0018      	movs	r0, r3
 8000acc:	2310      	movs	r3, #16
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f004 fa03 	bl	8004edc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fb06 	bl	80030ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	0052      	lsls	r2, r2, #1
 8000aec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000aee:	0021      	movs	r1, r4
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2202      	movs	r2, #2
 8000b00:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2202      	movs	r2, #2
 8000b06:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2208      	movs	r2, #8
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	0292      	lsls	r2, r2, #10
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	0592      	lsls	r2, r2, #22
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 fb2c 	bl	8003184 <HAL_RCC_OscConfig>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b30:	f000 f819 	bl	8000b66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2207      	movs	r2, #7
 8000b38:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2102      	movs	r1, #2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 fe27 	bl	80037a4 <HAL_RCC_ClockConfig>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b5a:	f000 f804 	bl	8000b66 <Error_Handler>
  }
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b013      	add	sp, #76	; 0x4c
 8000b64:	bd90      	pop	{r4, r7, pc}

08000b66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6a:	b672      	cpsid	i
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	641a      	str	r2, [r3, #64]	; 0x40
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0549      	lsls	r1, r1, #21
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	055b      	lsls	r3, r3, #21
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f9c6 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EQ_P_Pin);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 fe9e 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SET_LCD_Pin);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f000 fe9b 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EQ_M_Pin);
 8000c00:	2004      	movs	r0, #4
 8000c02:	f000 fe93 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <DMA1_Channel1_IRQHandler+0x14>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fbfa 	bl	800140c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	20000118 	.word	0x20000118

08000c24 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <I2C1_IRQHandler+0x2c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	699a      	ldr	r2, [r3, #24]
 8000c2e:	23e0      	movs	r3, #224	; 0xe0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	d004      	beq.n	8000c40 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <I2C1_IRQHandler+0x2c>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 f96b 	bl	8001f14 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000c3e:	e003      	b.n	8000c48 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <I2C1_IRQHandler+0x2c>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 f94c 	bl	8001ee0 <HAL_I2C_EV_IRQHandler>
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000030 	.word	0x20000030

08000c54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <USART1_IRQHandler+0x14>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f003 f8c8 	bl	8003df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000084 	.word	0x20000084

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000c7e:	4a24      	ldr	r2, [pc, #144]	; (8000d10 <MX_USART1_UART_Init+0x98>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000c84:	22e1      	movs	r2, #225	; 0xe1
 8000c86:	0252      	lsls	r2, r2, #9
 8000c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f003 f83e 	bl	8003d44 <HAL_UART_Init>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ccc:	f7ff ff4b 	bl	8000b66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f003 fffd 	bl	8004cd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cde:	f7ff ff42 	bl	8000b66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f004 f834 	bl	8004d54 <HAL_UARTEx_SetRxFifoThreshold>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cf0:	f7ff ff39 	bl	8000b66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <MX_USART1_UART_Init+0x94>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f003 ffb2 	bl	8004c60 <HAL_UARTEx_DisableFifoMode>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d00:	f7ff ff31 	bl	8000b66 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	20000084 	.word	0x20000084
 8000d10:	40013800 	.word	0x40013800

08000d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b091      	sub	sp, #68	; 0x44
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	232c      	movs	r3, #44	; 0x2c
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	0018      	movs	r0, r3
 8000d22:	2314      	movs	r3, #20
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f004 f8d8 	bl	8004edc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	2414      	movs	r4, #20
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2318      	movs	r3, #24
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f004 f8d0 	bl	8004edc <memset>
  if(uartHandle->Instance==USART1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a3c      	ldr	r2, [pc, #240]	; (8000e34 <HAL_UART_MspInit+0x120>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d171      	bne.n	8000e2a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	0018      	movs	r0, r3
 8000d56:	f002 fecf 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	1e03      	subs	r3, r0, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d5e:	f7ff ff02 	bl	8000b66 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d62:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <HAL_UART_MspInit+0x124>)
 8000d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d66:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <HAL_UART_MspInit+0x124>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	01c9      	lsls	r1, r1, #7
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <HAL_UART_MspInit+0x124>)
 8000d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	01db      	lsls	r3, r3, #7
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <HAL_UART_MspInit+0x124>)
 8000d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_UART_MspInit+0x124>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	430a      	orrs	r2, r1
 8000d88:	635a      	str	r2, [r3, #52]	; 0x34
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <HAL_UART_MspInit+0x124>)
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d96:	212c      	movs	r1, #44	; 0x2c
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	22c0      	movs	r2, #192	; 0xc0
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2202      	movs	r2, #2
 8000da4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2201      	movs	r2, #1
 8000db6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	187a      	adds	r2, r7, r1
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 fc31 	bl	8001628 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_UART_MspInit+0x12c>)
 8000dca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000dce:	2232      	movs	r2, #50	; 0x32
 8000dd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 f9ae 	bl	8001160 <HAL_DMA_Init>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000e08:	f7ff fead 	bl	8000b66 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000e12:	505a      	str	r2, [r3, r1]
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_UART_MspInit+0x128>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	201b      	movs	r0, #27
 8000e20:	f000 f96c 	bl	80010fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e24:	201b      	movs	r0, #27
 8000e26:	f000 f97e 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b011      	add	sp, #68	; 0x44
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	20000118 	.word	0x20000118
 8000e40:	40020008 	.word	0x40020008

08000e44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e48:	f7ff ff10 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	; (8000e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <LoopForever+0xe>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	; (8000e90 <LoopForever+0x16>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e72:	f004 f80f 	bl	8004e94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e76:	f7ff fdd3 	bl	8000a20 <main>

08000e7a <LoopForever>:

LoopForever:
  b LoopForever
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
  ldr   r0, =_estack
 8000e7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e88:	08004f94 	.word	0x08004f94
  ldr r2, =_sbss
 8000e8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e90:	20000178 	.word	0x20000178

08000e94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x3c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Init+0x3c>)
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	0049      	lsls	r1, r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f810 	bl	8000ed8 <HAL_InitTick>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e001      	b.n	8000ec8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fe54 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_InitTick+0x88>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d02b      	beq.n	8000f48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_InitTick+0x8c>)
 8000ef2:	681c      	ldr	r4, [r3, #0]
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_InitTick+0x88>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	0019      	movs	r1, r3
 8000efa:	23fa      	movs	r3, #250	; 0xfa
 8000efc:	0098      	lsls	r0, r3, #2
 8000efe:	f7ff f8ff 	bl	8000100 <__udivsi3>
 8000f02:	0003      	movs	r3, r0
 8000f04:	0019      	movs	r1, r3
 8000f06:	0020      	movs	r0, r4
 8000f08:	f7ff f8fa 	bl	8000100 <__udivsi3>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 f919 	bl	8001146 <HAL_SYSTICK_Config>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d112      	bne.n	8000f3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d80a      	bhi.n	8000f34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	2301      	movs	r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 f8e8 	bl	80010fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_InitTick+0x90>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e00d      	b.n	8000f50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e008      	b.n	8000f50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3e:	230f      	movs	r3, #15
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e003      	b.n	8000f50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b005      	add	sp, #20
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	001a      	movs	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	18d2      	adds	r2, r2, r3
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000174 	.word	0x20000174

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	20000174 	.word	0x20000174

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	0002      	movs	r2, r0
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb6:	d809      	bhi.n	8000fcc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	231f      	movs	r3, #31
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_EnableIRQ+0x30>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4091      	lsls	r1, r2
 8000fc8:	000a      	movs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b7f      	cmp	r3, #127	; 0x7f
 8000fec:	d828      	bhi.n	8001040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <__NVIC_SetPriority+0xd4>)
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	33c0      	adds	r3, #192	; 0xc0
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	589b      	ldr	r3, [r3, r2]
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	0011      	movs	r1, r2
 8001004:	2203      	movs	r2, #3
 8001006:	400a      	ands	r2, r1
 8001008:	00d2      	lsls	r2, r2, #3
 800100a:	21ff      	movs	r1, #255	; 0xff
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	43d2      	mvns	r2, r2
 8001012:	401a      	ands	r2, r3
 8001014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	019b      	lsls	r3, r3, #6
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	401a      	ands	r2, r3
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	0018      	movs	r0, r3
 8001024:	2303      	movs	r3, #3
 8001026:	4003      	ands	r3, r0
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	481f      	ldr	r0, [pc, #124]	; (80010ac <__NVIC_SetPriority+0xd4>)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	430a      	orrs	r2, r1
 8001038:	33c0      	adds	r3, #192	; 0xc0
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800103e:	e031      	b.n	80010a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <__NVIC_SetPriority+0xd8>)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0019      	movs	r1, r3
 8001048:	230f      	movs	r3, #15
 800104a:	400b      	ands	r3, r1
 800104c:	3b08      	subs	r3, #8
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3306      	adds	r3, #6
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1dfa      	adds	r2, r7, #7
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	0011      	movs	r1, r2
 8001060:	2203      	movs	r2, #3
 8001062:	400a      	ands	r2, r1
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	21ff      	movs	r1, #255	; 0xff
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	43d2      	mvns	r2, r2
 800106e:	401a      	ands	r2, r3
 8001070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	019b      	lsls	r3, r3, #6
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	401a      	ands	r2, r3
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	2303      	movs	r3, #3
 8001082:	4003      	ands	r3, r0
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <__NVIC_SetPriority+0xd8>)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	001c      	movs	r4, r3
 8001090:	230f      	movs	r3, #15
 8001092:	4023      	ands	r3, r4
 8001094:	3b08      	subs	r3, #8
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	430a      	orrs	r2, r1
 800109a:	3306      	adds	r3, #6
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	18c3      	adds	r3, r0, r3
 80010a0:	3304      	adds	r3, #4
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b003      	add	sp, #12
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	045b      	lsls	r3, r3, #17
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d301      	bcc.n	80010cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c8:	2301      	movs	r3, #1
 80010ca:	e010      	b.n	80010ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SysTick_Config+0x44>)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	3a01      	subs	r2, #1
 80010d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d4:	2301      	movs	r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	2103      	movs	r1, #3
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff ff7c 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x44>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x44>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	210f      	movs	r1, #15
 8001108:	187b      	adds	r3, r7, r1
 800110a:	1c02      	adds	r2, r0, #0
 800110c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	187b      	adds	r3, r7, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b004      	add	sp, #16
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	0002      	movs	r2, r0
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b25b      	sxtb	r3, r3
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff ff33 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff ffaf 	bl	80010b4 <SysTick_Config>
 8001156:	0003      	movs	r3, r0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e077      	b.n	8001262 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_DMA_Init+0x10c>)
 8001178:	4694      	mov	ip, r2
 800117a:	4463      	add	r3, ip
 800117c:	2114      	movs	r1, #20
 800117e:	0018      	movs	r0, r3
 8001180:	f7fe ffbe 	bl	8000100 <__udivsi3>
 8001184:	0003      	movs	r3, r0
 8001186:	009a      	lsls	r2, r3, #2
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2225      	movs	r2, #37	; 0x25
 8001190:	2102      	movs	r1, #2
 8001192:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4934      	ldr	r1, [pc, #208]	; (8001270 <HAL_DMA_Init+0x110>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	0018      	movs	r0, r3
 80011de:	f000 f9d3 	bl	8001588 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	01db      	lsls	r3, r3, #7
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d102      	bne.n	80011f4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fc:	213f      	movs	r1, #63	; 0x3f
 80011fe:	400a      	ands	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800120a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d011      	beq.n	8001238 <HAL_DMA_Init+0xd8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d80d      	bhi.n	8001238 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	0018      	movs	r0, r3
 8001220:	f000 f9de 	bl	80015e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	e008      	b.n	800124a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2225      	movs	r2, #37	; 0x25
 8001254:	2101      	movs	r1, #1
 8001256:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	2100      	movs	r1, #0
 800125e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	bffdfff8 	.word	0xbffdfff8
 8001270:	ffff800f 	.word	0xffff800f

08001274 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e050      	b.n	8001328 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2225      	movs	r2, #37	; 0x25
 800128a:	5c9b      	ldrb	r3, [r3, r2]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d008      	beq.n	80012a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2204      	movs	r2, #4
 8001296:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2224      	movs	r2, #36	; 0x24
 800129c:	2100      	movs	r1, #0
 800129e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e041      	b.n	8001328 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	210e      	movs	r1, #14
 80012b0:	438a      	bics	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	491c      	ldr	r1, [pc, #112]	; (8001330 <HAL_DMA_Abort+0xbc>)
 80012c0:	400a      	ands	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2101      	movs	r1, #1
 80012d0:	438a      	bics	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_DMA_Abort+0xc0>)
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	221c      	movs	r2, #28
 80012de:	4013      	ands	r3, r2
 80012e0:	2201      	movs	r2, #1
 80012e2:	409a      	lsls	r2, r3
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_DMA_Abort+0xc0>)
 80012e6:	430a      	orrs	r2, r1
 80012e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00c      	beq.n	8001316 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001306:	490a      	ldr	r1, [pc, #40]	; (8001330 <HAL_DMA_Abort+0xbc>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001314:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2225      	movs	r2, #37	; 0x25
 800131a:	2101      	movs	r1, #1
 800131c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2224      	movs	r2, #36	; 0x24
 8001322:	2100      	movs	r1, #0
 8001324:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	fffffeff 	.word	0xfffffeff
 8001334:	40020000 	.word	0x40020000

08001338 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001340:	210f      	movs	r1, #15
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2225      	movs	r2, #37	; 0x25
 800134c:	5c9b      	ldrb	r3, [r3, r2]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d006      	beq.n	8001362 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2204      	movs	r2, #4
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e049      	b.n	80013f6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	210e      	movs	r1, #14
 800136e:	438a      	bics	r2, r1
 8001370:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	438a      	bics	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	491d      	ldr	r1, [pc, #116]	; (8001404 <HAL_DMA_Abort_IT+0xcc>)
 800138e:	400a      	ands	r2, r1
 8001390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_DMA_Abort_IT+0xd0>)
 8001394:	6859      	ldr	r1, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	221c      	movs	r2, #28
 800139c:	4013      	ands	r3, r2
 800139e:	2201      	movs	r2, #1
 80013a0:	409a      	lsls	r2, r3
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_DMA_Abort_IT+0xd0>)
 80013a4:	430a      	orrs	r2, r1
 80013a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00c      	beq.n	80013d4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c4:	490f      	ldr	r1, [pc, #60]	; (8001404 <HAL_DMA_Abort_IT+0xcc>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80013d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2225      	movs	r2, #37	; 0x25
 80013d8:	2101      	movs	r1, #1
 80013da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	2100      	movs	r1, #0
 80013e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	0010      	movs	r0, r2
 80013f4:	4798      	blx	r3
    }
  }
  return status;
 80013f6:	230f      	movs	r3, #15
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b004      	add	sp, #16
 8001402:	bd80      	pop	{r7, pc}
 8001404:	fffffeff 	.word	0xfffffeff
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <HAL_DMA_IRQHandler+0x160>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	221c      	movs	r2, #28
 8001428:	4013      	ands	r3, r2
 800142a:	2204      	movs	r2, #4
 800142c:	409a      	lsls	r2, r3
 800142e:	0013      	movs	r3, r2
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	d027      	beq.n	8001486 <HAL_DMA_IRQHandler+0x7a>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2204      	movs	r2, #4
 800143a:	4013      	ands	r3, r2
 800143c:	d023      	beq.n	8001486 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2220      	movs	r2, #32
 8001446:	4013      	ands	r3, r2
 8001448:	d107      	bne.n	800145a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2104      	movs	r1, #4
 8001456:	438a      	bics	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_DMA_IRQHandler+0x160>)
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	221c      	movs	r2, #28
 8001464:	4013      	ands	r3, r2
 8001466:	2204      	movs	r2, #4
 8001468:	409a      	lsls	r2, r3
 800146a:	4b40      	ldr	r3, [pc, #256]	; (800156c <HAL_DMA_IRQHandler+0x160>)
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	2b00      	cmp	r3, #0
 8001476:	d100      	bne.n	800147a <HAL_DMA_IRQHandler+0x6e>
 8001478:	e073      	b.n	8001562 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	0010      	movs	r0, r2
 8001482:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001484:	e06d      	b.n	8001562 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	221c      	movs	r2, #28
 800148c:	4013      	ands	r3, r2
 800148e:	2202      	movs	r2, #2
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	d02e      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xec>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2202      	movs	r2, #2
 800149e:	4013      	ands	r3, r2
 80014a0:	d02a      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2220      	movs	r2, #32
 80014aa:	4013      	ands	r3, r2
 80014ac:	d10b      	bne.n	80014c6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	210a      	movs	r1, #10
 80014ba:	438a      	bics	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2225      	movs	r2, #37	; 0x25
 80014c2:	2101      	movs	r1, #1
 80014c4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <HAL_DMA_IRQHandler+0x160>)
 80014c8:	6859      	ldr	r1, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	221c      	movs	r2, #28
 80014d0:	4013      	ands	r3, r2
 80014d2:	2202      	movs	r2, #2
 80014d4:	409a      	lsls	r2, r3
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_DMA_IRQHandler+0x160>)
 80014d8:	430a      	orrs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2224      	movs	r2, #36	; 0x24
 80014e0:	2100      	movs	r1, #0
 80014e2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d03a      	beq.n	8001562 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	0010      	movs	r0, r2
 80014f4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80014f6:	e034      	b.n	8001562 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	221c      	movs	r2, #28
 80014fe:	4013      	ands	r3, r2
 8001500:	2208      	movs	r2, #8
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	d02b      	beq.n	8001564 <HAL_DMA_IRQHandler+0x158>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2208      	movs	r2, #8
 8001510:	4013      	ands	r3, r2
 8001512:	d027      	beq.n	8001564 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	210e      	movs	r1, #14
 8001520:	438a      	bics	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_DMA_IRQHandler+0x160>)
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	221c      	movs	r2, #28
 800152e:	4013      	ands	r3, r2
 8001530:	2201      	movs	r2, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_DMA_IRQHandler+0x160>)
 8001536:	430a      	orrs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2225      	movs	r2, #37	; 0x25
 8001544:	2101      	movs	r1, #1
 8001546:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2224      	movs	r2, #36	; 0x24
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	0010      	movs	r0, r2
 8001560:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46c0      	nop			; (mov r8, r8)
}
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40020000 	.word	0x40020000

08001570 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2225      	movs	r2, #37	; 0x25
 800157c:	5c9b      	ldrb	r3, [r3, r2]
 800157e:	b2db      	uxtb	r3, r3
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}

08001588 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001598:	4694      	mov	ip, r2
 800159a:	4463      	add	r3, ip
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	001a      	movs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	001a      	movs	r2, r3
 80015aa:	23ff      	movs	r3, #255	; 0xff
 80015ac:	4013      	ands	r3, r2
 80015ae:	3b08      	subs	r3, #8
 80015b0:	2114      	movs	r1, #20
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7fe fda4 	bl	8000100 <__udivsi3>
 80015b8:	0003      	movs	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80015c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	221f      	movs	r2, #31
 80015c6:	4013      	ands	r3, r2
 80015c8:	2201      	movs	r2, #1
 80015ca:	409a      	lsls	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	10008200 	.word	0x10008200
 80015dc:	40020880 	.word	0x40020880

080015e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	223f      	movs	r2, #63	; 0x3f
 80015ee:	4013      	ands	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015f6:	4694      	mov	ip, r2
 80015f8:	4463      	add	r3, ip
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	001a      	movs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001606:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3b01      	subs	r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	4013      	ands	r3, r2
 8001610:	2201      	movs	r2, #1
 8001612:	409a      	lsls	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bd80      	pop	{r7, pc}
 8001620:	1000823f 	.word	0x1000823f
 8001624:	40020940 	.word	0x40020940

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e147      	b.n	80018c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4091      	lsls	r1, r2
 8001642:	000a      	movs	r2, r1
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d100      	bne.n	8001650 <HAL_GPIO_Init+0x28>
 800164e:	e138      	b.n	80018c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	4013      	ands	r3, r2
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_GPIO_Init+0x40>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2203      	movs	r2, #3
 8001662:	4013      	ands	r3, r2
 8001664:	2b02      	cmp	r3, #2
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	409a      	lsls	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	43da      	mvns	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	409a      	lsls	r2, r3
 800168a:	0013      	movs	r3, r2
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	2201      	movs	r2, #1
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2203      	movs	r2, #3
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d017      	beq.n	8001706 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	43da      	mvns	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2203      	movs	r2, #3
 800170c:	4013      	ands	r3, r2
 800170e:	2b02      	cmp	r3, #2
 8001710:	d123      	bne.n	800175a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	58d3      	ldr	r3, [r2, r3]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2207      	movs	r2, #7
 8001724:	4013      	ands	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	409a      	lsls	r2, r3
 800172c:	0013      	movs	r3, r2
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2107      	movs	r1, #7
 800173e:	400b      	ands	r3, r1
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	6939      	ldr	r1, [r7, #16]
 8001758:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2203      	movs	r2, #3
 8001778:	401a      	ands	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	029b      	lsls	r3, r3, #10
 8001796:	4013      	ands	r3, r2
 8001798:	d100      	bne.n	800179c <HAL_GPIO_Init+0x174>
 800179a:	e092      	b.n	80018c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800179c:	4a50      	ldr	r2, [pc, #320]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3318      	adds	r3, #24
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	589b      	ldr	r3, [r3, r2]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2203      	movs	r2, #3
 80017ae:	4013      	ands	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	220f      	movs	r2, #15
 80017b4:	409a      	lsls	r2, r3
 80017b6:	0013      	movs	r3, r2
 80017b8:	43da      	mvns	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	23a0      	movs	r3, #160	; 0xa0
 80017c4:	05db      	lsls	r3, r3, #23
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x1ca>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a45      	ldr	r2, [pc, #276]	; (80018e4 <HAL_GPIO_Init+0x2bc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x1c6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a44      	ldr	r2, [pc, #272]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x1c2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a43      	ldr	r2, [pc, #268]	; (80018ec <HAL_GPIO_Init+0x2c4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x1be>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x1cc>
 80017e6:	2305      	movs	r3, #5
 80017e8:	e004      	b.n	80017f4 <HAL_GPIO_Init+0x1cc>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_Init+0x1cc>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x1cc>
 80017f2:	2300      	movs	r3, #0
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	2103      	movs	r1, #3
 80017f8:	400a      	ands	r2, r1
 80017fa:	00d2      	lsls	r2, r2, #3
 80017fc:	4093      	lsls	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001804:	4936      	ldr	r1, [pc, #216]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3318      	adds	r3, #24
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	035b      	lsls	r3, r3, #13
 800182a:	4013      	ands	r3, r2
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43da      	mvns	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	039b      	lsls	r3, r3, #14
 8001854:	4013      	ands	r3, r2
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 8001868:	2384      	movs	r3, #132	; 0x84
 800186a:	58d3      	ldr	r3, [r2, r3]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43da      	mvns	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	029b      	lsls	r3, r3, #10
 8001880:	4013      	ands	r3, r2
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800188c:	4914      	ldr	r1, [pc, #80]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 800188e:	2284      	movs	r2, #132	; 0x84
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	58d3      	ldr	r3, [r2, r3]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43da      	mvns	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	025b      	lsls	r3, r3, #9
 80018ae:	4013      	ands	r3, r2
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ba:	4909      	ldr	r1, [pc, #36]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	40da      	lsrs	r2, r3
 80018d0:	1e13      	subs	r3, r2, #0
 80018d2:	d000      	beq.n	80018d6 <HAL_GPIO_Init+0x2ae>
 80018d4:	e6b0      	b.n	8001638 <HAL_GPIO_Init+0x10>
  }
}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b006      	add	sp, #24
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021800 	.word	0x40021800
 80018e4:	50000400 	.word	0x50000400
 80018e8:	50000800 	.word	0x50000800
 80018ec:	50000c00 	.word	0x50000c00

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	0008      	movs	r0, r1
 80018fa:	0011      	movs	r1, r2
 80018fc:	1cbb      	adds	r3, r7, #2
 80018fe:	1c02      	adds	r2, r0, #0
 8001900:	801a      	strh	r2, [r3, #0]
 8001902:	1c7b      	adds	r3, r7, #1
 8001904:	1c0a      	adds	r2, r1, #0
 8001906:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001908:	1c7b      	adds	r3, r7, #1
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001910:	1cbb      	adds	r3, r7, #2
 8001912:	881a      	ldrh	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001918:	e003      	b.n	8001922 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191a:	1cbb      	adds	r3, r7, #2
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	0002      	movs	r2, r0
 8001934:	1dbb      	adds	r3, r7, #6
 8001936:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	1dba      	adds	r2, r7, #6
 800193e:	8812      	ldrh	r2, [r2, #0]
 8001940:	4013      	ands	r3, r2
 8001942:	d008      	beq.n	8001956 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001946:	1dba      	adds	r2, r7, #6
 8001948:	8812      	ldrh	r2, [r2, #0]
 800194a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	0018      	movs	r0, r3
 8001952:	f000 f815 	bl	8001980 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	1dba      	adds	r2, r7, #6
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	4013      	ands	r3, r2
 8001960:	d008      	beq.n	8001974 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001964:	1dba      	adds	r2, r7, #6
 8001966:	8812      	ldrh	r2, [r2, #0]
 8001968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800196a:	1dbb      	adds	r3, r7, #6
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe ff20 	bl	80007b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b002      	add	sp, #8
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021800 	.word	0x40021800

08001980 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	0002      	movs	r2, r0
 8001988:	1dbb      	adds	r3, r7, #6
 800198a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e082      	b.n	8001aac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2241      	movs	r2, #65	; 0x41
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d107      	bne.n	80019c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2240      	movs	r2, #64	; 0x40
 80019b6:	2100      	movs	r1, #0
 80019b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	0018      	movs	r0, r3
 80019be:	f7fe ff5d 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2241      	movs	r2, #65	; 0x41
 80019c6:	2124      	movs	r1, #36	; 0x24
 80019c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	438a      	bics	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4934      	ldr	r1, [pc, #208]	; (8001ab4 <HAL_I2C_Init+0x120>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4931      	ldr	r1, [pc, #196]	; (8001ab8 <HAL_I2C_Init+0x124>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	0209      	lsls	r1, r1, #8
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e007      	b.n	8001a22 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2184      	movs	r1, #132	; 0x84
 8001a1c:	0209      	lsls	r1, r1, #8
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d104      	bne.n	8001a34 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	491f      	ldr	r1, [pc, #124]	; (8001abc <HAL_I2C_Init+0x128>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	491a      	ldr	r1, [pc, #104]	; (8001ab8 <HAL_I2C_Init+0x124>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69d9      	ldr	r1, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1a      	ldr	r2, [r3, #32]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2241      	movs	r2, #65	; 0x41
 8001a98:	2120      	movs	r1, #32
 8001a9a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2242      	movs	r2, #66	; 0x42
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f0ffffff 	.word	0xf0ffffff
 8001ab8:	ffff7fff 	.word	0xffff7fff
 8001abc:	02008000 	.word	0x02008000

08001ac0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	0008      	movs	r0, r1
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	0019      	movs	r1, r3
 8001ace:	230a      	movs	r3, #10
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	1c02      	adds	r2, r0, #0
 8001ad4:	801a      	strh	r2, [r3, #0]
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	1c0a      	adds	r2, r1, #0
 8001adc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2241      	movs	r2, #65	; 0x41
 8001ae2:	5c9b      	ldrb	r3, [r3, r2]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d000      	beq.n	8001aec <HAL_I2C_Master_Transmit+0x2c>
 8001aea:	e0e7      	b.n	8001cbc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	5c9b      	ldrb	r3, [r3, r2]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_I2C_Master_Transmit+0x3a>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e0e1      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1fe>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b02:	f7ff fa45 	bl	8000f90 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	0219      	lsls	r1, r3, #8
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2319      	movs	r3, #25
 8001b16:	2201      	movs	r2, #1
 8001b18:	f000 ff7e 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0cc      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2241      	movs	r2, #65	; 0x41
 8001b28:	2121      	movs	r1, #33	; 0x21
 8001b2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2242      	movs	r2, #66	; 0x42
 8001b30:	2110      	movs	r1, #16
 8001b32:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2208      	movs	r2, #8
 8001b44:	18ba      	adds	r2, r7, r2
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2bff      	cmp	r3, #255	; 0xff
 8001b58:	d911      	bls.n	8001b7e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	22ff      	movs	r2, #255	; 0xff
 8001b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	045c      	lsls	r4, r3, #17
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	8819      	ldrh	r1, [r3, #0]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <HAL_I2C_Master_Transmit+0x208>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	0023      	movs	r3, r4
 8001b78:	f001 f982 	bl	8002e80 <I2C_TransferConfig>
 8001b7c:	e075      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	049c      	lsls	r4, r3, #18
 8001b92:	230a      	movs	r3, #10
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	8819      	ldrh	r1, [r3, #0]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <HAL_I2C_Master_Transmit+0x208>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	0023      	movs	r3, r4
 8001ba0:	f001 f96e 	bl	8002e80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ba4:	e061      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 ff72 	bl	8002a96 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bb2:	1e03      	subs	r3, r0, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e081      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d03a      	beq.n	8001c6a <HAL_I2C_Master_Transmit+0x1aa>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d136      	bne.n	8001c6a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	0013      	movs	r3, r2
 8001c06:	2200      	movs	r2, #0
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	f000 ff05 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e053      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2bff      	cmp	r3, #255	; 0xff
 8001c1e:	d911      	bls.n	8001c44 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	22ff      	movs	r2, #255	; 0xff
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	045c      	lsls	r4, r3, #17
 8001c30:	230a      	movs	r3, #10
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	8819      	ldrh	r1, [r3, #0]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	0023      	movs	r3, r4
 8001c3e:	f001 f91f 	bl	8002e80 <I2C_TransferConfig>
 8001c42:	e012      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	049c      	lsls	r4, r3, #18
 8001c58:	230a      	movs	r3, #10
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	8819      	ldrh	r1, [r3, #0]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	2300      	movs	r3, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	0023      	movs	r3, r4
 8001c66:	f001 f90b 	bl	8002e80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d198      	bne.n	8001ba6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 ff4a 	bl	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e01a      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	490c      	ldr	r1, [pc, #48]	; (8001ccc <HAL_I2C_Master_Transmit+0x20c>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2241      	movs	r2, #65	; 0x41
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2242      	movs	r2, #66	; 0x42
 8001cac:	2100      	movs	r1, #0
 8001cae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
  }
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b007      	add	sp, #28
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	80002000 	.word	0x80002000
 8001ccc:	fe00e800 	.word	0xfe00e800

08001cd0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	0008      	movs	r0, r1
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	0019      	movs	r1, r3
 8001cde:	230a      	movs	r3, #10
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	1c02      	adds	r2, r0, #0
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	1c0a      	adds	r2, r1, #0
 8001cec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2241      	movs	r2, #65	; 0x41
 8001cf2:	5c9b      	ldrb	r3, [r3, r2]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d000      	beq.n	8001cfc <HAL_I2C_Master_Receive+0x2c>
 8001cfa:	e0e8      	b.n	8001ece <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	5c9b      	ldrb	r3, [r3, r2]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_I2C_Master_Receive+0x3a>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e0e2      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x200>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d12:	f7ff f93d 	bl	8000f90 <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	0219      	lsls	r1, r3, #8
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2319      	movs	r3, #25
 8001d26:	2201      	movs	r2, #1
 8001d28:	f000 fe76 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8001d2c:	1e03      	subs	r3, r0, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0cd      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2241      	movs	r2, #65	; 0x41
 8001d38:	2122      	movs	r1, #34	; 0x22
 8001d3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2242      	movs	r2, #66	; 0x42
 8001d40:	2110      	movs	r1, #16
 8001d42:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2208      	movs	r2, #8
 8001d54:	18ba      	adds	r2, r7, r2
 8001d56:	8812      	ldrh	r2, [r2, #0]
 8001d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2bff      	cmp	r3, #255	; 0xff
 8001d68:	d911      	bls.n	8001d8e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	045c      	lsls	r4, r3, #17
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	8819      	ldrh	r1, [r3, #0]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	4b55      	ldr	r3, [pc, #340]	; (8001ed8 <HAL_I2C_Master_Receive+0x208>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	0023      	movs	r3, r4
 8001d88:	f001 f87a 	bl	8002e80 <I2C_TransferConfig>
 8001d8c:	e076      	b.n	8001e7c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	049c      	lsls	r4, r3, #18
 8001da2:	230a      	movs	r3, #10
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	8819      	ldrh	r1, [r3, #0]
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_I2C_Master_Receive+0x208>)
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	0023      	movs	r3, r4
 8001db0:	f001 f866 	bl	8002e80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001db4:	e062      	b.n	8001e7c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 fee5 	bl	8002b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e082      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d03a      	beq.n	8001e7c <HAL_I2C_Master_Receive+0x1ac>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d136      	bne.n	8001e7c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	0013      	movs	r3, r2
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	f000 fdfc 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e053      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d911      	bls.n	8001e56 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	045c      	lsls	r4, r3, #17
 8001e42:	230a      	movs	r3, #10
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	8819      	ldrh	r1, [r3, #0]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	0023      	movs	r3, r4
 8001e50:	f001 f816 	bl	8002e80 <I2C_TransferConfig>
 8001e54:	e012      	b.n	8001e7c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	049c      	lsls	r4, r3, #18
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	8819      	ldrh	r1, [r3, #0]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	2300      	movs	r3, #0
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	0023      	movs	r3, r4
 8001e78:	f001 f802 	bl	8002e80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d197      	bne.n	8001db6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 fe41 	bl	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e01a      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	490b      	ldr	r1, [pc, #44]	; (8001edc <HAL_I2C_Master_Receive+0x20c>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2241      	movs	r2, #65	; 0x41
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2242      	movs	r2, #66	; 0x42
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
  }
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b007      	add	sp, #28
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	80002400 	.word	0x80002400
 8001edc:	fe00e800 	.word	0xfe00e800

08001ee0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	68f9      	ldr	r1, [r7, #12]
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
  }
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	001a      	movs	r2, r3
 8001f32:	2301      	movs	r3, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d010      	beq.n	8001f5a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	09db      	lsrs	r3, r3, #7
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f42:	d00a      	beq.n	8001f5a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	2201      	movs	r2, #1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	0052      	lsls	r2, r2, #1
 8001f58:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	0a9b      	lsrs	r3, r3, #10
 8001f5e:	001a      	movs	r2, r3
 8001f60:	2301      	movs	r3, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	d010      	beq.n	8001f88 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	09db      	lsrs	r3, r3, #7
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f70:	d00a      	beq.n	8001f88 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	2208      	movs	r2, #8
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	00d2      	lsls	r2, r2, #3
 8001f86:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	0a5b      	lsrs	r3, r3, #9
 8001f8c:	001a      	movs	r2, r3
 8001f8e:	2301      	movs	r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d010      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	09db      	lsrs	r3, r3, #7
 8001f98:	001a      	movs	r2, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	220b      	movs	r2, #11
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d005      	beq.n	8001fd0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0011      	movs	r1, r2
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 fbd8 	bl	8002780 <I2C_ITError>
  }
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b006      	add	sp, #24
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	0008      	movs	r0, r1
 8002002:	0011      	movs	r1, r2
 8002004:	1cfb      	adds	r3, r7, #3
 8002006:	1c02      	adds	r2, r0, #0
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	003b      	movs	r3, r7
 800200c:	1c0a      	adds	r2, r1, #0
 800200e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b002      	add	sp, #8
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b002      	add	sp, #8
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b002      	add	sp, #8
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2240      	movs	r2, #64	; 0x40
 8002062:	5c9b      	ldrb	r3, [r3, r2]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <I2C_Slave_ISR_IT+0x24>
 8002068:	2302      	movs	r3, #2
 800206a:	e0fa      	b.n	8002262 <I2C_Slave_ISR_IT+0x21a>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2240      	movs	r2, #64	; 0x40
 8002070:	2101      	movs	r1, #1
 8002072:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	001a      	movs	r2, r3
 800207a:	2301      	movs	r3, #1
 800207c:	4013      	ands	r3, r2
 800207e:	d00b      	beq.n	8002098 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	001a      	movs	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800208a:	d005      	beq.n	8002098 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	0011      	movs	r1, r2
 8002092:	0018      	movs	r0, r3
 8002094:	f000 f9f6 	bl	8002484 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	001a      	movs	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d054      	beq.n	800214e <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	001a      	movs	r2, r3
 80020aa:	2301      	movs	r3, #1
 80020ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020ae:	d04e      	beq.n	800214e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d12d      	bne.n	8002116 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2241      	movs	r2, #65	; 0x41
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b28      	cmp	r3, #40	; 0x28
 80020c4:	d10b      	bne.n	80020de <I2C_Slave_ISR_IT+0x96>
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	049b      	lsls	r3, r3, #18
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d106      	bne.n	80020de <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0011      	movs	r1, r2
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 faf8 	bl	80026cc <I2C_ITListenCplt>
 80020dc:	e036      	b.n	800214c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2241      	movs	r2, #65	; 0x41
 80020e2:	5c9b      	ldrb	r3, [r3, r2]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b29      	cmp	r3, #41	; 0x29
 80020e8:	d110      	bne.n	800210c <I2C_Slave_ISR_IT+0xc4>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	4a5f      	ldr	r2, [pc, #380]	; (800226c <I2C_Slave_ISR_IT+0x224>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00c      	beq.n	800210c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2210      	movs	r2, #16
 80020f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 fc4a 	bl	8002996 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	0018      	movs	r0, r3
 8002106:	f000 f957 	bl	80023b8 <I2C_ITSlaveSeqCplt>
 800210a:	e01f      	b.n	800214c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2210      	movs	r2, #16
 8002112:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002114:	e09d      	b.n	8002252 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2210      	movs	r2, #16
 800211c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	2204      	movs	r2, #4
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <I2C_Slave_ISR_IT+0xf4>
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	045b      	lsls	r3, r3, #17
 8002136:	429a      	cmp	r2, r3
 8002138:	d000      	beq.n	800213c <I2C_Slave_ISR_IT+0xf4>
 800213a:	e08a      	b.n	8002252 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f000 fb1b 	bl	8002780 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800214a:	e082      	b.n	8002252 <I2C_Slave_ISR_IT+0x20a>
 800214c:	e081      	b.n	8002252 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	001a      	movs	r2, r3
 8002154:	2301      	movs	r3, #1
 8002156:	4013      	ands	r3, r2
 8002158:	d031      	beq.n	80021be <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	001a      	movs	r2, r3
 8002160:	2301      	movs	r3, #1
 8002162:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002164:	d02b      	beq.n	80021be <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d018      	beq.n	80021a2 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d154      	bne.n	8002256 <I2C_Slave_ISR_IT+0x20e>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	4a2f      	ldr	r2, [pc, #188]	; (800226c <I2C_Slave_ISR_IT+0x224>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d050      	beq.n	8002256 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f8fe 	bl	80023b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80021bc:	e04b      	b.n	8002256 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	001a      	movs	r2, r3
 80021c4:	2301      	movs	r3, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	d00c      	beq.n	80021e4 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	001a      	movs	r2, r3
 80021d0:	2301      	movs	r3, #1
 80021d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80021d4:	d006      	beq.n	80021e4 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	0011      	movs	r1, r2
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f847 	bl	8002270 <I2C_ITAddrCplt>
 80021e2:	e039      	b.n	8002258 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	001a      	movs	r2, r3
 80021ea:	2301      	movs	r3, #1
 80021ec:	4013      	ands	r3, r2
 80021ee:	d033      	beq.n	8002258 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	001a      	movs	r2, r3
 80021f6:	2301      	movs	r3, #1
 80021f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021fa:	d02d      	beq.n	8002258 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d018      	beq.n	8002238 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
 8002236:	e00f      	b.n	8002258 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	045b      	lsls	r3, r3, #17
 800223e:	429a      	cmp	r2, r3
 8002240:	d002      	beq.n	8002248 <I2C_Slave_ISR_IT+0x200>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f8b4 	bl	80023b8 <I2C_ITSlaveSeqCplt>
 8002250:	e002      	b.n	8002258 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	e000      	b.n	8002258 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002256:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	2100      	movs	r1, #0
 800225e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	ffff0000 	.word	0xffff0000

08002270 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2241      	movs	r2, #65	; 0x41
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	001a      	movs	r2, r3
 8002284:	2328      	movs	r3, #40	; 0x28
 8002286:	4013      	ands	r3, r2
 8002288:	2b28      	cmp	r3, #40	; 0x28
 800228a:	d000      	beq.n	800228e <I2C_ITAddrCplt+0x1e>
 800228c:	e088      	b.n	80023a0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	b2da      	uxtb	r2, r3
 8002298:	250f      	movs	r5, #15
 800229a:	197b      	adds	r3, r7, r5
 800229c:	2101      	movs	r1, #1
 800229e:	400a      	ands	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	200c      	movs	r0, #12
 80022ae:	183b      	adds	r3, r7, r0
 80022b0:	21fe      	movs	r1, #254	; 0xfe
 80022b2:	400a      	ands	r2, r1
 80022b4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	240a      	movs	r4, #10
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	0592      	lsls	r2, r2, #22
 80022c4:	0d92      	lsrs	r2, r2, #22
 80022c6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	2308      	movs	r3, #8
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	21fe      	movs	r1, #254	; 0xfe
 80022d6:	400a      	ands	r2, r1
 80022d8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d148      	bne.n	8002374 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80022e2:	0021      	movs	r1, r4
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	09db      	lsrs	r3, r3, #7
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	183b      	adds	r3, r7, r0
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	4053      	eors	r3, r2
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	001a      	movs	r2, r3
 80022f6:	2306      	movs	r3, #6
 80022f8:	4013      	ands	r3, r2
 80022fa:	d120      	bne.n	800233e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80022fc:	183b      	adds	r3, r7, r0
 80022fe:	187a      	adds	r2, r7, r1
 8002300:	8812      	ldrh	r2, [r2, #0]
 8002302:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	2b02      	cmp	r3, #2
 8002314:	d14c      	bne.n	80023b0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2208      	movs	r2, #8
 8002322:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2240      	movs	r2, #64	; 0x40
 8002328:	2100      	movs	r1, #0
 800232a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800232c:	183b      	adds	r3, r7, r0
 800232e:	881a      	ldrh	r2, [r3, #0]
 8002330:	197b      	adds	r3, r7, r5
 8002332:	7819      	ldrb	r1, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff fe5e 	bl	8001ff8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800233c:	e038      	b.n	80023b0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800233e:	240c      	movs	r4, #12
 8002340:	193b      	adds	r3, r7, r4
 8002342:	2208      	movs	r2, #8
 8002344:	18ba      	adds	r2, r7, r2
 8002346:	8812      	ldrh	r2, [r2, #0]
 8002348:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	021a      	lsls	r2, r3, #8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0011      	movs	r1, r2
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fdce 	bl	8002ef4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2240      	movs	r2, #64	; 0x40
 800235c:	2100      	movs	r1, #0
 800235e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002360:	193b      	adds	r3, r7, r4
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	230f      	movs	r3, #15
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	7819      	ldrb	r1, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff fe43 	bl	8001ff8 <HAL_I2C_AddrCallback>
}
 8002372:	e01d      	b.n	80023b0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0011      	movs	r1, r2
 800237c:	0018      	movs	r0, r3
 800237e:	f000 fdb9 	bl	8002ef4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800238a:	230c      	movs	r3, #12
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	230f      	movs	r3, #15
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	7819      	ldrb	r1, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff fe2d 	bl	8001ff8 <HAL_I2C_AddrCallback>
}
 800239e:	e007      	b.n	80023b0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2208      	movs	r2, #8
 80023a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bdb0      	pop	{r4, r5, r7, pc}

080023b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2242      	movs	r2, #66	; 0x42
 80023cc:	2100      	movs	r1, #0
 80023ce:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	0b9b      	lsrs	r3, r3, #14
 80023d4:	001a      	movs	r2, r3
 80023d6:	2301      	movs	r3, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d008      	beq.n	80023ee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4925      	ldr	r1, [pc, #148]	; (800247c <I2C_ITSlaveSeqCplt+0xc4>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e00d      	b.n	800240a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0bdb      	lsrs	r3, r3, #15
 80023f2:	001a      	movs	r2, r3
 80023f4:	2301      	movs	r3, #1
 80023f6:	4013      	ands	r3, r2
 80023f8:	d007      	beq.n	800240a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	491e      	ldr	r1, [pc, #120]	; (8002480 <I2C_ITSlaveSeqCplt+0xc8>)
 8002406:	400a      	ands	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2241      	movs	r2, #65	; 0x41
 800240e:	5c9b      	ldrb	r3, [r3, r2]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b29      	cmp	r3, #41	; 0x29
 8002414:	d114      	bne.n	8002440 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2241      	movs	r2, #65	; 0x41
 800241a:	2128      	movs	r1, #40	; 0x28
 800241c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2221      	movs	r2, #33	; 0x21
 8002422:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2101      	movs	r1, #1
 8002428:	0018      	movs	r0, r3
 800242a:	f000 fd63 	bl	8002ef4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2240      	movs	r2, #64	; 0x40
 8002432:	2100      	movs	r1, #0
 8002434:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff fdcd 	bl	8001fd8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800243e:	e019      	b.n	8002474 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2241      	movs	r2, #65	; 0x41
 8002444:	5c9b      	ldrb	r3, [r3, r2]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b2a      	cmp	r3, #42	; 0x2a
 800244a:	d113      	bne.n	8002474 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2241      	movs	r2, #65	; 0x41
 8002450:	2128      	movs	r1, #40	; 0x28
 8002452:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2222      	movs	r2, #34	; 0x22
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2102      	movs	r1, #2
 800245e:	0018      	movs	r0, r3
 8002460:	f000 fd48 	bl	8002ef4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff fdba 	bl	8001fe8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}
 800247c:	ffffbfff 	.word	0xffffbfff
 8002480:	ffff7fff 	.word	0xffff7fff

08002484 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800249a:	200f      	movs	r0, #15
 800249c:	183b      	adds	r3, r7, r0
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	2141      	movs	r1, #65	; 0x41
 80024a2:	5c52      	ldrb	r2, [r2, r1]
 80024a4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2220      	movs	r2, #32
 80024ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024ae:	183b      	adds	r3, r7, r0
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b21      	cmp	r3, #33	; 0x21
 80024b4:	d003      	beq.n	80024be <I2C_ITSlaveCplt+0x3a>
 80024b6:	183b      	adds	r3, r7, r0
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b29      	cmp	r3, #41	; 0x29
 80024bc:	d109      	bne.n	80024d2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80024be:	4a7d      	ldr	r2, [pc, #500]	; (80026b4 <I2C_ITSlaveCplt+0x230>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0011      	movs	r1, r2
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 fd15 	bl	8002ef4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2221      	movs	r2, #33	; 0x21
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
 80024d0:	e011      	b.n	80024f6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024d2:	220f      	movs	r2, #15
 80024d4:	18bb      	adds	r3, r7, r2
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b22      	cmp	r3, #34	; 0x22
 80024da:	d003      	beq.n	80024e4 <I2C_ITSlaveCplt+0x60>
 80024dc:	18bb      	adds	r3, r7, r2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b2a      	cmp	r3, #42	; 0x2a
 80024e2:	d108      	bne.n	80024f6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80024e4:	4a74      	ldr	r2, [pc, #464]	; (80026b8 <I2C_ITSlaveCplt+0x234>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0011      	movs	r1, r2
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 fd02 	bl	8002ef4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2222      	movs	r2, #34	; 0x22
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0209      	lsls	r1, r1, #8
 8002504:	430a      	orrs	r2, r1
 8002506:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	496a      	ldr	r1, [pc, #424]	; (80026bc <I2C_ITSlaveCplt+0x238>)
 8002514:	400a      	ands	r2, r1
 8002516:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fa3b 	bl	8002996 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	0b9b      	lsrs	r3, r3, #14
 8002524:	001a      	movs	r2, r3
 8002526:	2301      	movs	r3, #1
 8002528:	4013      	ands	r3, r2
 800252a:	d013      	beq.n	8002554 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4962      	ldr	r1, [pc, #392]	; (80026c0 <I2C_ITSlaveCplt+0x23c>)
 8002538:	400a      	ands	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002552:	e018      	b.n	8002586 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	0bdb      	lsrs	r3, r3, #15
 8002558:	001a      	movs	r2, r3
 800255a:	2301      	movs	r3, #1
 800255c:	4013      	ands	r3, r2
 800255e:	d012      	beq.n	8002586 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4956      	ldr	r1, [pc, #344]	; (80026c4 <I2C_ITSlaveCplt+0x240>)
 800256c:	400a      	ands	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	001a      	movs	r2, r3
 800258c:	2301      	movs	r3, #1
 800258e:	4013      	ands	r3, r2
 8002590:	d020      	beq.n	80025d4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2204      	movs	r2, #4
 8002596:	4393      	bics	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00c      	beq.n	80025d4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	2204      	movs	r2, #4
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2242      	movs	r2, #66	; 0x42
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0011      	movs	r1, r2
 8002608:	0018      	movs	r0, r3
 800260a:	f000 f8b9 	bl	8002780 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2241      	movs	r2, #65	; 0x41
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b28      	cmp	r3, #40	; 0x28
 8002618:	d147      	bne.n	80026aa <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	0011      	movs	r1, r2
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f853 	bl	80026cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002626:	e040      	b.n	80026aa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <I2C_ITSlaveCplt+0x244>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d016      	beq.n	8002660 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff febf 	bl	80023b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <I2C_ITSlaveCplt+0x244>)
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2241      	movs	r2, #65	; 0x41
 8002644:	2120      	movs	r1, #32
 8002646:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2240      	movs	r2, #64	; 0x40
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff fcdd 	bl	8002018 <HAL_I2C_ListenCpltCallback>
}
 800265e:	e024      	b.n	80026aa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2241      	movs	r2, #65	; 0x41
 8002664:	5c9b      	ldrb	r3, [r3, r2]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b22      	cmp	r3, #34	; 0x22
 800266a:	d10f      	bne.n	800268c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2241      	movs	r2, #65	; 0x41
 8002670:	2120      	movs	r1, #32
 8002672:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	2100      	movs	r1, #0
 8002680:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff fcaf 	bl	8001fe8 <HAL_I2C_SlaveRxCpltCallback>
}
 800268a:	e00e      	b.n	80026aa <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2241      	movs	r2, #65	; 0x41
 8002690:	2120      	movs	r1, #32
 8002692:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2240      	movs	r2, #64	; 0x40
 800269e:	2100      	movs	r1, #0
 80026a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff fc97 	bl	8001fd8 <HAL_I2C_SlaveTxCpltCallback>
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b006      	add	sp, #24
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	00008001 	.word	0x00008001
 80026b8:	00008002 	.word	0x00008002
 80026bc:	fe00e800 	.word	0xfe00e800
 80026c0:	ffffbfff 	.word	0xffffbfff
 80026c4:	ffff7fff 	.word	0xffff7fff
 80026c8:	ffff0000 	.word	0xffff0000

080026cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <I2C_ITListenCplt+0xac>)
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2241      	movs	r2, #65	; 0x41
 80026e6:	2120      	movs	r1, #32
 80026e8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2242      	movs	r2, #66	; 0x42
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	001a      	movs	r2, r3
 80026fe:	2301      	movs	r3, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d022      	beq.n	800274a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	2204      	movs	r2, #4
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800274a:	4a0c      	ldr	r2, [pc, #48]	; (800277c <I2C_ITListenCplt+0xb0>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fbcf 	bl	8002ef4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2210      	movs	r2, #16
 800275c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2240      	movs	r2, #64	; 0x40
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff fc55 	bl	8002018 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b002      	add	sp, #8
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	ffff0000 	.word	0xffff0000
 800277c:	00008003 	.word	0x00008003

08002780 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800278a:	200f      	movs	r0, #15
 800278c:	183b      	adds	r3, r7, r0
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	2141      	movs	r1, #65	; 0x41
 8002792:	5c52      	ldrb	r2, [r2, r1]
 8002794:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2242      	movs	r2, #66	; 0x42
 800279a:	2100      	movs	r1, #0
 800279c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a62      	ldr	r2, [pc, #392]	; (800292c <I2C_ITError+0x1ac>)
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80027b6:	183b      	adds	r3, r7, r0
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b28      	cmp	r3, #40	; 0x28
 80027bc:	d007      	beq.n	80027ce <I2C_ITError+0x4e>
 80027be:	183b      	adds	r3, r7, r0
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b29      	cmp	r3, #41	; 0x29
 80027c4:	d003      	beq.n	80027ce <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b2a      	cmp	r3, #42	; 0x2a
 80027cc:	d10c      	bne.n	80027e8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2103      	movs	r1, #3
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fb8e 	bl	8002ef4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2241      	movs	r2, #65	; 0x41
 80027dc:	2128      	movs	r1, #40	; 0x28
 80027de:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a53      	ldr	r2, [pc, #332]	; (8002930 <I2C_ITError+0x1b0>)
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
 80027e6:	e012      	b.n	800280e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <I2C_ITError+0x1b4>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fb80 	bl	8002ef4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2241      	movs	r2, #65	; 0x41
 80027f8:	5c9b      	ldrb	r3, [r3, r2]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b60      	cmp	r3, #96	; 0x60
 80027fe:	d003      	beq.n	8002808 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2241      	movs	r2, #65	; 0x41
 8002804:	2120      	movs	r1, #32
 8002806:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	2b00      	cmp	r3, #0
 800281a:	d03b      	beq.n	8002894 <I2C_ITError+0x114>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b11      	cmp	r3, #17
 8002820:	d002      	beq.n	8002828 <I2C_ITError+0xa8>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b21      	cmp	r3, #33	; 0x21
 8002826:	d135      	bne.n	8002894 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	01db      	lsls	r3, r3, #7
 8002832:	401a      	ands	r2, r3
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	01db      	lsls	r3, r3, #7
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	493c      	ldr	r1, [pc, #240]	; (8002938 <I2C_ITError+0x1b8>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	0018      	movs	r0, r3
 8002852:	f7fe fe8d 	bl	8001570 <HAL_DMA_GetState>
 8002856:	0003      	movs	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d016      	beq.n	800288a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	4a36      	ldr	r2, [pc, #216]	; (800293c <I2C_ITError+0x1bc>)
 8002862:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	0018      	movs	r0, r3
 8002872:	f7fe fd61 	bl	8001338 <HAL_DMA_Abort_IT>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d051      	beq.n	800291e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	0018      	movs	r0, r3
 8002886:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002888:	e049      	b.n	800291e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 f859 	bl	8002944 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002892:	e044      	b.n	800291e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d03b      	beq.n	8002914 <I2C_ITError+0x194>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b12      	cmp	r3, #18
 80028a0:	d002      	beq.n	80028a8 <I2C_ITError+0x128>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b22      	cmp	r3, #34	; 0x22
 80028a6:	d135      	bne.n	8002914 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	401a      	ands	r2, r3
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	491e      	ldr	r1, [pc, #120]	; (8002940 <I2C_ITError+0x1c0>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fe fe4d 	bl	8001570 <HAL_DMA_GetState>
 80028d6:	0003      	movs	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d016      	beq.n	800290a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <I2C_ITError+0x1bc>)
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7fe fd21 	bl	8001338 <HAL_DMA_Abort_IT>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d013      	beq.n	8002922 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	0018      	movs	r0, r3
 8002906:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002908:	e00b      	b.n	8002922 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f819 	bl	8002944 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002912:	e006      	b.n	8002922 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f814 	bl	8002944 <I2C_TreatErrorCallback>
  }
}
 800291c:	e002      	b.n	8002924 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	e000      	b.n	8002924 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002922:	46c0      	nop			; (mov r8, r8)
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b004      	add	sp, #16
 800292a:	bd80      	pop	{r7, pc}
 800292c:	ffff0000 	.word	0xffff0000
 8002930:	08002049 	.word	0x08002049
 8002934:	00008003 	.word	0x00008003
 8002938:	ffffbfff 	.word	0xffffbfff
 800293c:	080029db 	.word	0x080029db
 8002940:	ffff7fff 	.word	0xffff7fff

08002944 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2241      	movs	r2, #65	; 0x41
 8002950:	5c9b      	ldrb	r3, [r3, r2]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b60      	cmp	r3, #96	; 0x60
 8002956:	d10f      	bne.n	8002978 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2241      	movs	r2, #65	; 0x41
 800295c:	2120      	movs	r1, #32
 800295e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2240      	movs	r2, #64	; 0x40
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f7ff fb61 	bl	8002038 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002976:	e00a      	b.n	800298e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2240      	movs	r2, #64	; 0x40
 8002982:	2100      	movs	r1, #0
 8002984:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff fb4d 	bl	8002028 <HAL_I2C_ErrorCallback>
}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}

08002996 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d103      	bne.n	80029b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2200      	movs	r2, #0
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2201      	movs	r2, #1
 80029bc:	4013      	ands	r3, r2
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d007      	beq.n	80029d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699a      	ldr	r2, [r3, #24]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	619a      	str	r2, [r3, #24]
  }
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}

080029da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	2200      	movs	r2, #0
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	2200      	movs	r2, #0
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff ff9a 	bl	8002944 <I2C_TreatErrorCallback>
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b004      	add	sp, #16
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	1dfb      	adds	r3, r7, #7
 8002a26:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a28:	e021      	b.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	d01e      	beq.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a30:	f7fe faae 	bl	8000f90 <HAL_GetTick>
 8002a34:	0002      	movs	r2, r0
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d113      	bne.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2241      	movs	r2, #65	; 0x41
 8002a56:	2120      	movs	r1, #32
 8002a58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2242      	movs	r2, #66	; 0x42
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	2100      	movs	r1, #0
 8002a68:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00f      	b.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	4013      	ands	r3, r2
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	425a      	negs	r2, r3
 8002a7e:	4153      	adcs	r3, r2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	001a      	movs	r2, r3
 8002a84:	1dfb      	adds	r3, r7, #7
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d0ce      	beq.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b004      	add	sp, #16
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aa2:	e02b      	b.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 f8e8 	bl	8002c80 <I2C_IsErrorOccurred>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e029      	b.n	8002b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3301      	adds	r3, #1
 8002abc:	d01e      	beq.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fa67 	bl	8000f90 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d113      	bne.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	2220      	movs	r2, #32
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2241      	movs	r2, #65	; 0x41
 8002ae4:	2120      	movs	r1, #32
 8002ae6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2242      	movs	r2, #66	; 0x42
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e007      	b.n	8002b0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2202      	movs	r2, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d1cc      	bne.n	8002aa4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b20:	e028      	b.n	8002b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 f8a9 	bl	8002c80 <I2C_IsErrorOccurred>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e026      	b.n	8002b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7fe fa2b 	bl	8000f90 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d113      	bne.n	8002b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	2220      	movs	r2, #32
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2241      	movs	r2, #65	; 0x41
 8002b5c:	2120      	movs	r1, #32
 8002b5e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2242      	movs	r2, #66	; 0x42
 8002b64:	2100      	movs	r1, #0
 8002b66:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2240      	movs	r2, #64	; 0x40
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e007      	b.n	8002b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d1cf      	bne.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b98:	e064      	b.n	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 f86d 	bl	8002c80 <I2C_IsErrorOccurred>
 8002ba6:	1e03      	subs	r3, r0, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e062      	b.n	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d138      	bne.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d105      	bne.n	8002bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e04e      	b.n	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d107      	bne.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2210      	movs	r2, #16
 8002bea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
 8002bf2:	e002      	b.n	8002bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	491b      	ldr	r1, [pc, #108]	; (8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002c0e:	400a      	ands	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2241      	movs	r2, #65	; 0x41
 8002c16:	2120      	movs	r1, #32
 8002c18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2242      	movs	r2, #66	; 0x42
 8002c1e:	2100      	movs	r1, #0
 8002c20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e022      	b.n	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fe f9af 	bl	8000f90 <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10f      	bne.n	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	2220      	movs	r2, #32
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2241      	movs	r2, #65	; 0x41
 8002c54:	2120      	movs	r1, #32
 8002c56:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e007      	b.n	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d193      	bne.n	8002b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fe00e800 	.word	0xfe00e800

08002c80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b08b      	sub	sp, #44	; 0x2c
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2327      	movs	r3, #39	; 0x27
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d100      	bne.n	8002cae <I2C_IsErrorOccurred+0x2e>
 8002cac:	e082      	b.n	8002db4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cb6:	e060      	b.n	8002d7a <I2C_IsErrorOccurred+0xfa>
 8002cb8:	2427      	movs	r4, #39	; 0x27
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	193a      	adds	r2, r7, r4
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	d058      	beq.n	8002d7a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cc8:	f7fe f962 	bl	8000f90 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d306      	bcc.n	8002ce6 <I2C_IsErrorOccurred+0x66>
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	193a      	adds	r2, r7, r4
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d149      	bne.n	8002d7a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	01db      	lsls	r3, r3, #7
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cf4:	2013      	movs	r0, #19
 8002cf6:	183b      	adds	r3, r7, r0
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	2142      	movs	r1, #66	; 0x42
 8002cfc:	5c52      	ldrb	r2, [r2, r1]
 8002cfe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d126      	bne.n	8002d62 <I2C_IsErrorOccurred+0xe2>
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	01db      	lsls	r3, r3, #7
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d021      	beq.n	8002d62 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002d1e:	183b      	adds	r3, r7, r0
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d01d      	beq.n	8002d62 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	01c9      	lsls	r1, r1, #7
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d38:	f7fe f92a 	bl	8000f90 <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d40:	e00f      	b.n	8002d62 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d42:	f7fe f925 	bl	8000f90 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b19      	cmp	r3, #25
 8002d4e:	d908      	bls.n	8002d62 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	2220      	movs	r2, #32
 8002d54:	4313      	orrs	r3, r2
 8002d56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d58:	2327      	movs	r3, #39	; 0x27
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]

              break;
 8002d60:	e00b      	b.n	8002d7a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2127      	movs	r1, #39	; 0x27
 8002d6e:	187a      	adds	r2, r7, r1
 8002d70:	1879      	adds	r1, r7, r1
 8002d72:	7809      	ldrb	r1, [r1, #0]
 8002d74:	7011      	strb	r1, [r2, #0]
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d1e3      	bne.n	8002d42 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2220      	movs	r2, #32
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d004      	beq.n	8002d92 <I2C_IsErrorOccurred+0x112>
 8002d88:	2327      	movs	r3, #39	; 0x27
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d092      	beq.n	8002cb8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d92:	2327      	movs	r3, #39	; 0x27
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2220      	movs	r2, #32
 8002da2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	2204      	movs	r2, #4
 8002da8:	4313      	orrs	r3, r2
 8002daa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dac:	2327      	movs	r3, #39	; 0x27
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d00c      	beq.n	8002de0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	0052      	lsls	r2, r2, #1
 8002dd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd8:	2327      	movs	r3, #39	; 0x27
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4013      	ands	r3, r2
 8002de8:	d00c      	beq.n	8002e04 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	2208      	movs	r2, #8
 8002dee:	4313      	orrs	r3, r2
 8002df0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	00d2      	lsls	r2, r2, #3
 8002dfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dfc:	2327      	movs	r3, #39	; 0x27
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d00c      	beq.n	8002e28 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	2202      	movs	r2, #2
 8002e12:	4313      	orrs	r3, r2
 8002e14:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e20:	2327      	movs	r3, #39	; 0x27
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002e28:	2327      	movs	r3, #39	; 0x27
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01d      	beq.n	8002e6e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7ff fdae 	bl	8002996 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	490d      	ldr	r1, [pc, #52]	; (8002e7c <I2C_IsErrorOccurred+0x1fc>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2241      	movs	r2, #65	; 0x41
 8002e5a:	2120      	movs	r1, #32
 8002e5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2242      	movs	r2, #66	; 0x42
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2240      	movs	r2, #64	; 0x40
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002e6e:	2327      	movs	r3, #39	; 0x27
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	781b      	ldrb	r3, [r3, #0]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b00b      	add	sp, #44	; 0x2c
 8002e7a:	bd90      	pop	{r4, r7, pc}
 8002e7c:	fe00e800 	.word	0xfe00e800

08002e80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	0008      	movs	r0, r1
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	240a      	movs	r4, #10
 8002e90:	193b      	adds	r3, r7, r4
 8002e92:	1c02      	adds	r2, r0, #0
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	2009      	movs	r0, #9
 8002e98:	183b      	adds	r3, r7, r0
 8002e9a:	1c0a      	adds	r2, r1, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e9e:	193b      	adds	r3, r7, r4
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	059b      	lsls	r3, r3, #22
 8002ea4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	0419      	lsls	r1, r3, #16
 8002eac:	23ff      	movs	r3, #255	; 0xff
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eb2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eca:	0d51      	lsrs	r1, r2, #21
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	00d2      	lsls	r2, r2, #3
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <I2C_TransferConfig+0x70>)
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	43d2      	mvns	r2, r2
 8002ed8:	401a      	ands	r2, r3
 8002eda:	0011      	movs	r1, r2
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b007      	add	sp, #28
 8002eec:	bd90      	pop	{r4, r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	03ff63ff 	.word	0x03ff63ff

08002ef4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	000a      	movs	r2, r1
 8002efe:	1cbb      	adds	r3, r7, #2
 8002f00:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f06:	1cbb      	adds	r3, r7, #2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d010      	beq.n	8002f32 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2242      	movs	r2, #66	; 0x42
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2241      	movs	r2, #65	; 0x41
 8002f1c:	5c9b      	ldrb	r3, [r3, r2]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	001a      	movs	r2, r3
 8002f22:	2328      	movs	r3, #40	; 0x28
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b28      	cmp	r3, #40	; 0x28
 8002f28:	d003      	beq.n	8002f32 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	22b0      	movs	r2, #176	; 0xb0
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f32:	1cbb      	adds	r3, r7, #2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d010      	beq.n	8002f5e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2244      	movs	r2, #68	; 0x44
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2241      	movs	r2, #65	; 0x41
 8002f48:	5c9b      	ldrb	r3, [r3, r2]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	2328      	movs	r3, #40	; 0x28
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b28      	cmp	r3, #40	; 0x28
 8002f54:	d003      	beq.n	8002f5e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	22b0      	movs	r2, #176	; 0xb0
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f5e:	1cbb      	adds	r3, r7, #2
 8002f60:	2200      	movs	r2, #0
 8002f62:	5e9b      	ldrsh	r3, [r3, r2]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da03      	bge.n	8002f70 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	22b8      	movs	r2, #184	; 0xb8
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f70:	1cbb      	adds	r3, r7, #2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d103      	bne.n	8002f80 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2290      	movs	r2, #144	; 0x90
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f80:	1cbb      	adds	r3, r7, #2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d103      	bne.n	8002f90 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f90:	1cbb      	adds	r3, r7, #2
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d103      	bne.n	8002fa0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	43d9      	mvns	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	400a      	ands	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b004      	add	sp, #16
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2241      	movs	r2, #65	; 0x41
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d138      	bne.n	8003044 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e032      	b.n	8003046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2241      	movs	r2, #65	; 0x41
 8002fec:	2124      	movs	r1, #36	; 0x24
 8002fee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4911      	ldr	r1, [pc, #68]	; (8003050 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2241      	movs	r2, #65	; 0x41
 8003034:	2120      	movs	r1, #32
 8003036:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2240      	movs	r2, #64	; 0x40
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	ffffefff 	.word	0xffffefff

08003054 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2241      	movs	r2, #65	; 0x41
 8003062:	5c9b      	ldrb	r3, [r3, r2]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	d139      	bne.n	80030de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003074:	2302      	movs	r3, #2
 8003076:	e033      	b.n	80030e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	2101      	movs	r1, #1
 800307e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2241      	movs	r2, #65	; 0x41
 8003084:	2124      	movs	r1, #36	; 0x24
 8003086:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	438a      	bics	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2241      	movs	r2, #65	; 0x41
 80030ce:	2120      	movs	r1, #32
 80030d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2240      	movs	r2, #64	; 0x40
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b004      	add	sp, #16
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	fffff0ff 	.word	0xfffff0ff

080030ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	0019      	movs	r1, r3
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	429a      	cmp	r2, r3
 800310e:	d11f      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	0013      	movs	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	189b      	adds	r3, r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4912      	ldr	r1, [pc, #72]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800311e:	0018      	movs	r0, r3
 8003120:	f7fc ffee 	bl	8000100 <__udivsi3>
 8003124:	0003      	movs	r3, r0
 8003126:	3301      	adds	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800312a:	e008      	b.n	800313e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3b01      	subs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e001      	b.n	800313e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e009      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	401a      	ands	r2, r3
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	429a      	cmp	r2, r3
 800314e:	d0ed      	beq.n	800312c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b004      	add	sp, #16
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	40007000 	.word	0x40007000
 8003160:	fffff9ff 	.word	0xfffff9ff
 8003164:	20000000 	.word	0x20000000
 8003168:	000f4240 	.word	0x000f4240

0800316c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	23e0      	movs	r3, #224	; 0xe0
 8003176:	01db      	lsls	r3, r3, #7
 8003178:	4013      	ands	r3, r2
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000

08003184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e2f3      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	d100      	bne.n	80031a2 <HAL_RCC_OscConfig+0x1e>
 80031a0:	e07c      	b.n	800329c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a2:	4bc3      	ldr	r3, [pc, #780]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2238      	movs	r2, #56	; 0x38
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ac:	4bc0      	ldr	r3, [pc, #768]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2203      	movs	r2, #3
 80031b2:	4013      	ands	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d102      	bne.n	80031c2 <HAL_RCC_OscConfig+0x3e>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d10b      	bne.n	80031e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	4bb9      	ldr	r3, [pc, #740]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	029b      	lsls	r3, r3, #10
 80031d0:	4013      	ands	r3, r2
 80031d2:	d062      	beq.n	800329a <HAL_RCC_OscConfig+0x116>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d15e      	bne.n	800329a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e2ce      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	025b      	lsls	r3, r3, #9
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x78>
 80031ec:	4bb0      	ldr	r3, [pc, #704]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4baf      	ldr	r3, [pc, #700]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	0249      	lsls	r1, r1, #9
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e020      	b.n	800323e <HAL_RCC_OscConfig+0xba>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	23a0      	movs	r3, #160	; 0xa0
 8003202:	02db      	lsls	r3, r3, #11
 8003204:	429a      	cmp	r2, r3
 8003206:	d10e      	bne.n	8003226 <HAL_RCC_OscConfig+0xa2>
 8003208:	4ba9      	ldr	r3, [pc, #676]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4ba8      	ldr	r3, [pc, #672]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	02c9      	lsls	r1, r1, #11
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	4ba6      	ldr	r3, [pc, #664]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4ba5      	ldr	r3, [pc, #660]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	0249      	lsls	r1, r1, #9
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e00b      	b.n	800323e <HAL_RCC_OscConfig+0xba>
 8003226:	4ba2      	ldr	r3, [pc, #648]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4ba1      	ldr	r3, [pc, #644]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800322c:	49a1      	ldr	r1, [pc, #644]	; (80034b4 <HAL_RCC_OscConfig+0x330>)
 800322e:	400a      	ands	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	4b9f      	ldr	r3, [pc, #636]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b9e      	ldr	r3, [pc, #632]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003238:	499f      	ldr	r1, [pc, #636]	; (80034b8 <HAL_RCC_OscConfig+0x334>)
 800323a:	400a      	ands	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d014      	beq.n	8003270 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fd fea3 	bl	8000f90 <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003250:	f7fd fe9e 	bl	8000f90 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e28d      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003262:	4b93      	ldr	r3, [pc, #588]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	4013      	ands	r3, r2
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0xcc>
 800326e:	e015      	b.n	800329c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fd fe8e 	bl	8000f90 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327a:	f7fd fe89 	bl	8000f90 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e278      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800328c:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	029b      	lsls	r3, r3, #10
 8003294:	4013      	ands	r3, r2
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0xf6>
 8003298:	e000      	b.n	800329c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d100      	bne.n	80032a8 <HAL_RCC_OscConfig+0x124>
 80032a6:	e099      	b.n	80033dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a8:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2238      	movs	r2, #56	; 0x38
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b2:	4b7f      	ldr	r3, [pc, #508]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2203      	movs	r2, #3
 80032b8:	4013      	ands	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d102      	bne.n	80032c8 <HAL_RCC_OscConfig+0x144>
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d002      	beq.n	80032ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d135      	bne.n	800333a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ce:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4013      	ands	r3, r2
 80032d8:	d005      	beq.n	80032e6 <HAL_RCC_OscConfig+0x162>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e24b      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e6:	4b72      	ldr	r3, [pc, #456]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a74      	ldr	r2, [pc, #464]	; (80034bc <HAL_RCC_OscConfig+0x338>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	021a      	lsls	r2, r3, #8
 80032f6:	4b6e      	ldr	r3, [pc, #440]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d112      	bne.n	8003328 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003302:	4b6b      	ldr	r3, [pc, #428]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a6e      	ldr	r2, [pc, #440]	; (80034c0 <HAL_RCC_OscConfig+0x33c>)
 8003308:	4013      	ands	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003316:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	0adb      	lsrs	r3, r3, #11
 800331c:	2207      	movs	r2, #7
 800331e:	4013      	ands	r3, r2
 8003320:	4a68      	ldr	r2, [pc, #416]	; (80034c4 <HAL_RCC_OscConfig+0x340>)
 8003322:	40da      	lsrs	r2, r3
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <HAL_RCC_OscConfig+0x344>)
 8003326:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_OscConfig+0x348>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0018      	movs	r0, r3
 800332e:	f7fd fdd3 	bl	8000ed8 <HAL_InitTick>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d051      	beq.n	80033da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e221      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d030      	beq.n	80033a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003342:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5e      	ldr	r2, [pc, #376]	; (80034c0 <HAL_RCC_OscConfig+0x33c>)
 8003348:	4013      	ands	r3, r2
 800334a:	0019      	movs	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	4b57      	ldr	r3, [pc, #348]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003356:	4b56      	ldr	r3, [pc, #344]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b55      	ldr	r3, [pc, #340]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0049      	lsls	r1, r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd fe14 	bl	8000f90 <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7fd fe0f 	bl	8000f90 <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1fe      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4013      	ands	r3, r2
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b48      	ldr	r3, [pc, #288]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a4a      	ldr	r2, [pc, #296]	; (80034bc <HAL_RCC_OscConfig+0x338>)
 8003392:	4013      	ands	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e01b      	b.n	80033dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80033a4:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80033aa:	4949      	ldr	r1, [pc, #292]	; (80034d0 <HAL_RCC_OscConfig+0x34c>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fd fdee 	bl	8000f90 <HAL_GetTick>
 80033b4:	0003      	movs	r3, r0
 80033b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fd fde9 	bl	8000f90 <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e1d8      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033cc:	4b38      	ldr	r3, [pc, #224]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x236>
 80033d8:	e000      	b.n	80033dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2208      	movs	r2, #8
 80033e2:	4013      	ands	r3, r2
 80033e4:	d047      	beq.n	8003476 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80033e6:	4b32      	ldr	r3, [pc, #200]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2238      	movs	r2, #56	; 0x38
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b18      	cmp	r3, #24
 80033f0:	d10a      	bne.n	8003408 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80033f2:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	2202      	movs	r2, #2
 80033f8:	4013      	ands	r3, r2
 80033fa:	d03c      	beq.n	8003476 <HAL_RCC_OscConfig+0x2f2>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d138      	bne.n	8003476 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e1ba      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d019      	beq.n	8003444 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003414:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003416:	2101      	movs	r1, #1
 8003418:	430a      	orrs	r2, r1
 800341a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd fdb8 	bl	8000f90 <HAL_GetTick>
 8003420:	0003      	movs	r3, r0
 8003422:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003426:	f7fd fdb3 	bl	8000f90 <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1a2      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	2202      	movs	r2, #2
 800343e:	4013      	ands	r3, r2
 8003440:	d0f1      	beq.n	8003426 <HAL_RCC_OscConfig+0x2a2>
 8003442:	e018      	b.n	8003476 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003446:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800344a:	2101      	movs	r1, #1
 800344c:	438a      	bics	r2, r1
 800344e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fd9e 	bl	8000f90 <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345a:	f7fd fd99 	bl	8000f90 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e188      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	2202      	movs	r2, #2
 8003472:	4013      	ands	r3, r2
 8003474:	d1f1      	bne.n	800345a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2204      	movs	r2, #4
 800347c:	4013      	ands	r3, r2
 800347e:	d100      	bne.n	8003482 <HAL_RCC_OscConfig+0x2fe>
 8003480:	e0c6      	b.n	8003610 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003482:	231f      	movs	r3, #31
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2238      	movs	r2, #56	; 0x38
 8003490:	4013      	ands	r3, r2
 8003492:	2b20      	cmp	r3, #32
 8003494:	d11e      	bne.n	80034d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x32c>)
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	2202      	movs	r2, #2
 800349c:	4013      	ands	r3, r2
 800349e:	d100      	bne.n	80034a2 <HAL_RCC_OscConfig+0x31e>
 80034a0:	e0b6      	b.n	8003610 <HAL_RCC_OscConfig+0x48c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d000      	beq.n	80034ac <HAL_RCC_OscConfig+0x328>
 80034aa:	e0b1      	b.n	8003610 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e166      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
 80034b0:	40021000 	.word	0x40021000
 80034b4:	fffeffff 	.word	0xfffeffff
 80034b8:	fffbffff 	.word	0xfffbffff
 80034bc:	ffff80ff 	.word	0xffff80ff
 80034c0:	ffffc7ff 	.word	0xffffc7ff
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004
 80034d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034d4:	4bac      	ldr	r3, [pc, #688]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80034d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	055b      	lsls	r3, r3, #21
 80034dc:	4013      	ands	r3, r2
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_OscConfig+0x360>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x362>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d011      	beq.n	800350e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	4ba7      	ldr	r3, [pc, #668]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80034ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ee:	4ba6      	ldr	r3, [pc, #664]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	0549      	lsls	r1, r1, #21
 80034f4:	430a      	orrs	r2, r1
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80034f8:	4ba3      	ldr	r3, [pc, #652]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80034fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	055b      	lsls	r3, r3, #21
 8003500:	4013      	ands	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003506:	231f      	movs	r3, #31
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350e:	4b9f      	ldr	r3, [pc, #636]	; (800378c <HAL_RCC_OscConfig+0x608>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4013      	ands	r3, r2
 8003518:	d11a      	bne.n	8003550 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800351a:	4b9c      	ldr	r3, [pc, #624]	; (800378c <HAL_RCC_OscConfig+0x608>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b9b      	ldr	r3, [pc, #620]	; (800378c <HAL_RCC_OscConfig+0x608>)
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0049      	lsls	r1, r1, #1
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003528:	f7fd fd32 	bl	8000f90 <HAL_GetTick>
 800352c:	0003      	movs	r3, r0
 800352e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003532:	f7fd fd2d 	bl	8000f90 <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e11c      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003544:	4b91      	ldr	r3, [pc, #580]	; (800378c <HAL_RCC_OscConfig+0x608>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4013      	ands	r3, r2
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x3e2>
 8003558:	4b8b      	ldr	r3, [pc, #556]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800355a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800355c:	4b8a      	ldr	r3, [pc, #552]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800355e:	2101      	movs	r1, #1
 8003560:	430a      	orrs	r2, r1
 8003562:	65da      	str	r2, [r3, #92]	; 0x5c
 8003564:	e01c      	b.n	80035a0 <HAL_RCC_OscConfig+0x41c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b05      	cmp	r3, #5
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x404>
 800356e:	4b86      	ldr	r3, [pc, #536]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003570:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003572:	4b85      	ldr	r3, [pc, #532]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003574:	2104      	movs	r1, #4
 8003576:	430a      	orrs	r2, r1
 8003578:	65da      	str	r2, [r3, #92]	; 0x5c
 800357a:	4b83      	ldr	r3, [pc, #524]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800357c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800357e:	4b82      	ldr	r3, [pc, #520]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003580:	2101      	movs	r1, #1
 8003582:	430a      	orrs	r2, r1
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0x41c>
 8003588:	4b7f      	ldr	r3, [pc, #508]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800358a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800358c:	4b7e      	ldr	r3, [pc, #504]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800358e:	2101      	movs	r1, #1
 8003590:	438a      	bics	r2, r1
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
 8003594:	4b7c      	ldr	r3, [pc, #496]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003598:	4b7b      	ldr	r3, [pc, #492]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800359a:	2104      	movs	r1, #4
 800359c:	438a      	bics	r2, r1
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d014      	beq.n	80035d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fd fcf2 	bl	8000f90 <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b0:	e009      	b.n	80035c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fd fced 	bl	8000f90 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	4a74      	ldr	r2, [pc, #464]	; (8003790 <HAL_RCC_OscConfig+0x60c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0db      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c6:	4b70      	ldr	r3, [pc, #448]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2202      	movs	r2, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x42e>
 80035d0:	e013      	b.n	80035fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd fcdd 	bl	8000f90 <HAL_GetTick>
 80035d6:	0003      	movs	r3, r0
 80035d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035da:	e009      	b.n	80035f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fd fcd8 	bl	8000f90 <HAL_GetTick>
 80035e0:	0002      	movs	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	4a6a      	ldr	r2, [pc, #424]	; (8003790 <HAL_RCC_OscConfig+0x60c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0c6      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035f0:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	2202      	movs	r2, #2
 80035f6:	4013      	ands	r3, r2
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80035fa:	231f      	movs	r3, #31
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003604:	4b60      	ldr	r3, [pc, #384]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003608:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800360a:	4962      	ldr	r1, [pc, #392]	; (8003794 <HAL_RCC_OscConfig+0x610>)
 800360c:	400a      	ands	r2, r1
 800360e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d100      	bne.n	800361a <HAL_RCC_OscConfig+0x496>
 8003618:	e0b0      	b.n	800377c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361a:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2238      	movs	r2, #56	; 0x38
 8003620:	4013      	ands	r3, r2
 8003622:	2b10      	cmp	r3, #16
 8003624:	d100      	bne.n	8003628 <HAL_RCC_OscConfig+0x4a4>
 8003626:	e078      	b.n	800371a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d153      	bne.n	80036d8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b55      	ldr	r3, [pc, #340]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b54      	ldr	r3, [pc, #336]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003636:	4958      	ldr	r1, [pc, #352]	; (8003798 <HAL_RCC_OscConfig+0x614>)
 8003638:	400a      	ands	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fca8 	bl	8000f90 <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7fd fca3 	bl	8000f90 <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e092      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	049b      	lsls	r3, r3, #18
 8003660:	4013      	ands	r3, r2
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003664:	4b48      	ldr	r3, [pc, #288]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a4c      	ldr	r2, [pc, #304]	; (800379c <HAL_RCC_OscConfig+0x618>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1a      	ldr	r2, [r3, #32]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	431a      	orrs	r2, r3
 800368c:	4b3e      	ldr	r3, [pc, #248]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800368e:	430a      	orrs	r2, r1
 8003690:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b3c      	ldr	r3, [pc, #240]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	0449      	lsls	r1, r1, #17
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80036a0:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	4b38      	ldr	r3, [pc, #224]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	0549      	lsls	r1, r1, #21
 80036aa:	430a      	orrs	r2, r1
 80036ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd fc6f 	bl	8000f90 <HAL_GetTick>
 80036b2:	0003      	movs	r3, r0
 80036b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd fc6a 	bl	8000f90 <HAL_GetTick>
 80036bc:	0002      	movs	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e059      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	049b      	lsls	r3, r3, #18
 80036d2:	4013      	ands	r3, r2
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x534>
 80036d6:	e051      	b.n	800377c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 80036de:	492e      	ldr	r1, [pc, #184]	; (8003798 <HAL_RCC_OscConfig+0x614>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd fc54 	bl	8000f90 <HAL_GetTick>
 80036e8:	0003      	movs	r3, r0
 80036ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd fc4f 	bl	8000f90 <HAL_GetTick>
 80036f2:	0002      	movs	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e03e      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	049b      	lsls	r3, r3, #18
 8003708:	4013      	ands	r3, r2
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003712:	4923      	ldr	r1, [pc, #140]	; (80037a0 <HAL_RCC_OscConfig+0x61c>)
 8003714:	400a      	ands	r2, r1
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	e030      	b.n	800377c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e02b      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003726:	4b18      	ldr	r3, [pc, #96]	; (8003788 <HAL_RCC_OscConfig+0x604>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2203      	movs	r2, #3
 8003730:	401a      	ands	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	429a      	cmp	r2, r3
 8003738:	d11e      	bne.n	8003778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2270      	movs	r2, #112	; 0x70
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d117      	bne.n	8003778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	23fe      	movs	r3, #254	; 0xfe
 800374c:	01db      	lsls	r3, r3, #7
 800374e:	401a      	ands	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d10e      	bne.n	8003778 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	23f8      	movs	r3, #248	; 0xf8
 800375e:	039b      	lsls	r3, r3, #14
 8003760:	401a      	ands	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	0f5b      	lsrs	r3, r3, #29
 800376e:	075a      	lsls	r2, r3, #29
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b008      	add	sp, #32
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	40021000 	.word	0x40021000
 800378c:	40007000 	.word	0x40007000
 8003790:	00001388 	.word	0x00001388
 8003794:	efffffff 	.word	0xefffffff
 8003798:	feffffff 	.word	0xfeffffff
 800379c:	1fc1808c 	.word	0x1fc1808c
 80037a0:	effefffc 	.word	0xeffefffc

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0e9      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b76      	ldr	r3, [pc, #472]	; (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2207      	movs	r2, #7
 80037be:	4013      	ands	r3, r2
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d91e      	bls.n	8003804 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b73      	ldr	r3, [pc, #460]	; (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2207      	movs	r2, #7
 80037cc:	4393      	bics	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	4b70      	ldr	r3, [pc, #448]	; (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037d8:	f7fd fbda 	bl	8000f90 <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037e0:	e009      	b.n	80037f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	f7fd fbd5 	bl	8000f90 <HAL_GetTick>
 80037e6:	0002      	movs	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	4a6a      	ldr	r2, [pc, #424]	; (8003998 <HAL_RCC_ClockConfig+0x1f4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0ca      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037f6:	4b67      	ldr	r3, [pc, #412]	; (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2207      	movs	r2, #7
 80037fc:	4013      	ands	r3, r2
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d1ee      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2202      	movs	r2, #2
 800380a:	4013      	ands	r3, r2
 800380c:	d015      	beq.n	800383a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2204      	movs	r2, #4
 8003814:	4013      	ands	r3, r2
 8003816:	d006      	beq.n	8003826 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003818:	4b60      	ldr	r3, [pc, #384]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 800381e:	21e0      	movs	r1, #224	; 0xe0
 8003820:	01c9      	lsls	r1, r1, #7
 8003822:	430a      	orrs	r2, r1
 8003824:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003826:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4a5d      	ldr	r2, [pc, #372]	; (80039a0 <HAL_RCC_ClockConfig+0x1fc>)
 800382c:	4013      	ands	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	4b59      	ldr	r3, [pc, #356]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2201      	movs	r2, #1
 8003840:	4013      	ands	r3, r2
 8003842:	d057      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	029b      	lsls	r3, r3, #10
 8003854:	4013      	ands	r3, r2
 8003856:	d12b      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e097      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d107      	bne.n	8003874 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	049b      	lsls	r3, r3, #18
 800386c:	4013      	ands	r3, r2
 800386e:	d11f      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e08b      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387c:	4b47      	ldr	r3, [pc, #284]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4013      	ands	r3, r2
 8003886:	d113      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e07f      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	2202      	movs	r2, #2
 800389a:	4013      	ands	r3, r2
 800389c:	d108      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e074      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4b3e      	ldr	r3, [pc, #248]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2202      	movs	r2, #2
 80038a8:	4013      	ands	r3, r2
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e06d      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2207      	movs	r2, #7
 80038b6:	4393      	bics	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fd fb64 	bl	8000f90 <HAL_GetTick>
 80038c8:	0003      	movs	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038cc:	e009      	b.n	80038e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ce:	f7fd fb5f 	bl	8000f90 <HAL_GetTick>
 80038d2:	0002      	movs	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <HAL_RCC_ClockConfig+0x1f4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e054      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2238      	movs	r2, #56	; 0x38
 80038e8:	401a      	ands	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1ec      	bne.n	80038ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2207      	movs	r2, #7
 80038fa:	4013      	ands	r3, r2
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d21e      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2207      	movs	r2, #7
 8003908:	4393      	bics	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	4b21      	ldr	r3, [pc, #132]	; (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003914:	f7fd fb3c 	bl	8000f90 <HAL_GetTick>
 8003918:	0003      	movs	r3, r0
 800391a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800391c:	e009      	b.n	8003932 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391e:	f7fd fb37 	bl	8000f90 <HAL_GetTick>
 8003922:	0002      	movs	r2, r0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_RCC_ClockConfig+0x1f4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e02c      	b.n	800398c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2207      	movs	r2, #7
 8003938:	4013      	ands	r3, r2
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d1ee      	bne.n	800391e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2204      	movs	r2, #4
 8003946:	4013      	ands	r3, r2
 8003948:	d009      	beq.n	800395e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <HAL_RCC_ClockConfig+0x200>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 800395a:	430a      	orrs	r2, r1
 800395c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800395e:	f000 f829 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003962:	0001      	movs	r1, r0
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_RCC_ClockConfig+0x1f8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	220f      	movs	r2, #15
 800396c:	401a      	ands	r2, r3
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <HAL_RCC_ClockConfig+0x204>)
 8003970:	0092      	lsls	r2, r2, #2
 8003972:	58d3      	ldr	r3, [r2, r3]
 8003974:	221f      	movs	r2, #31
 8003976:	4013      	ands	r3, r2
 8003978:	000a      	movs	r2, r1
 800397a:	40da      	lsrs	r2, r3
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x208>)
 800397e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_ClockConfig+0x20c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0018      	movs	r0, r3
 8003986:	f7fd faa7 	bl	8000ed8 <HAL_InitTick>
 800398a:	0003      	movs	r3, r0
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b004      	add	sp, #16
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40022000 	.word	0x40022000
 8003998:	00001388 	.word	0x00001388
 800399c:	40021000 	.word	0x40021000
 80039a0:	fffff0ff 	.word	0xfffff0ff
 80039a4:	ffff8fff 	.word	0xffff8fff
 80039a8:	08004f04 	.word	0x08004f04
 80039ac:	20000000 	.word	0x20000000
 80039b0:	20000004 	.word	0x20000004

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ba:	4b3c      	ldr	r3, [pc, #240]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2238      	movs	r2, #56	; 0x38
 80039c0:	4013      	ands	r3, r2
 80039c2:	d10f      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0adb      	lsrs	r3, r3, #11
 80039ca:	2207      	movs	r2, #7
 80039cc:	4013      	ands	r3, r2
 80039ce:	2201      	movs	r2, #1
 80039d0:	409a      	lsls	r2, r3
 80039d2:	0013      	movs	r3, r2
 80039d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	4835      	ldr	r0, [pc, #212]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80039da:	f7fc fb91 	bl	8000100 <__udivsi3>
 80039de:	0003      	movs	r3, r0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e05d      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2238      	movs	r2, #56	; 0x38
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d102      	bne.n	80039f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039f0:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x100>)
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e054      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f6:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2238      	movs	r2, #56	; 0x38
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d138      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2203      	movs	r2, #3
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	2207      	movs	r2, #7
 8003a14:	4013      	ands	r3, r2
 8003a16:	3301      	adds	r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d10d      	bne.n	8003a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	4824      	ldr	r0, [pc, #144]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a24:	f7fc fb6c 	bl	8000100 <__udivsi3>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	227f      	movs	r2, #127	; 0x7f
 8003a34:	4013      	ands	r3, r2
 8003a36:	434b      	muls	r3, r1
 8003a38:	617b      	str	r3, [r7, #20]
        break;
 8003a3a:	e00d      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	481c      	ldr	r0, [pc, #112]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a40:	f7fc fb5e 	bl	8000100 <__udivsi3>
 8003a44:	0003      	movs	r3, r0
 8003a46:	0019      	movs	r1, r3
 8003a48:	4b18      	ldr	r3, [pc, #96]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	227f      	movs	r2, #127	; 0x7f
 8003a50:	4013      	ands	r3, r2
 8003a52:	434b      	muls	r3, r1
 8003a54:	617b      	str	r3, [r7, #20]
        break;
 8003a56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003a58:	4b14      	ldr	r3, [pc, #80]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0f5b      	lsrs	r3, r3, #29
 8003a5e:	2207      	movs	r2, #7
 8003a60:	4013      	ands	r3, r2
 8003a62:	3301      	adds	r3, #1
 8003a64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	6978      	ldr	r0, [r7, #20]
 8003a6a:	f7fc fb49 	bl	8000100 <__udivsi3>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	e015      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a74:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2238      	movs	r2, #56	; 0x38
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d103      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2238      	movs	r2, #56	; 0x38
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b18      	cmp	r3, #24
 8003a92:	d103      	bne.n	8003a9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a94:	23fa      	movs	r3, #250	; 0xfa
 8003a96:	01db      	lsls	r3, r3, #7
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003aa0:	693b      	ldr	r3, [r7, #16]
}
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b006      	add	sp, #24
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	007a1200 	.word	0x007a1200

08003ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	20000000 	.word	0x20000000

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003ad0:	f7ff fff2 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad4:	0004      	movs	r4, r0
 8003ad6:	f7ff fb49 	bl	800316c <LL_RCC_GetAPB1Prescaler>
 8003ada:	0003      	movs	r3, r0
 8003adc:	0b1a      	lsrs	r2, r3, #12
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ae0:	0092      	lsls	r2, r2, #2
 8003ae2:	58d3      	ldr	r3, [r2, r3]
 8003ae4:	221f      	movs	r2, #31
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	40dc      	lsrs	r4, r3
 8003aea:	0023      	movs	r3, r4
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bdb0      	pop	{r4, r5, r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	08004f44 	.word	0x08004f44

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003b00:	2313      	movs	r3, #19
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b08:	2312      	movs	r3, #18
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	029b      	lsls	r3, r3, #10
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003b1c:	e0a3      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2011      	movs	r0, #17
 8003b20:	183b      	adds	r3, r7, r0
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b7f      	ldr	r3, [pc, #508]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	055b      	lsls	r3, r3, #21
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d110      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b36:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	0549      	lsls	r1, r1, #21
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b40:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	055b      	lsls	r3, r3, #21
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4e:	183b      	adds	r3, r7, r0
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b54:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	0049      	lsls	r1, r1, #1
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b62:	f7fd fa15 	bl	8000f90 <HAL_GetTick>
 8003b66:	0003      	movs	r3, r0
 8003b68:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6c:	f7fd fa10 	bl	8000f90 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d904      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003b7a:	2313      	movs	r3, #19
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2203      	movs	r2, #3
 8003b80:	701a      	strb	r2, [r3, #0]
        break;
 8003b82:	e005      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b84:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d0ed      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003b90:	2313      	movs	r3, #19
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d154      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d019      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d014      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	4a5c      	ldr	r2, [pc, #368]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bc0:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bc4:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	0249      	lsls	r1, r1, #9
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bce:	4b55      	ldr	r3, [pc, #340]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bd2:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bd4:	4956      	ldr	r1, [pc, #344]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bda:	4b52      	ldr	r3, [pc, #328]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2201      	movs	r2, #1
 8003be4:	4013      	ands	r3, r2
 8003be6:	d016      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd f9d2 	bl	8000f90 <HAL_GetTick>
 8003bec:	0003      	movs	r3, r0
 8003bee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf0:	e00c      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fd f9cd 	bl	8000f90 <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	4a4d      	ldr	r2, [pc, #308]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d904      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003c02:	2313      	movs	r3, #19
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2203      	movs	r2, #3
 8003c08:	701a      	strb	r2, [r3, #0]
            break;
 8003c0a:	e004      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0c:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c10:	2202      	movs	r2, #2
 8003c12:	4013      	ands	r3, r2
 8003c14:	d0ed      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c16:	2313      	movs	r3, #19
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c20:	4b40      	ldr	r3, [pc, #256]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	4a41      	ldr	r2, [pc, #260]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c30:	430a      	orrs	r2, r1
 8003c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c34:	e00c      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c36:	2312      	movs	r3, #18
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	2213      	movs	r2, #19
 8003c3c:	18ba      	adds	r2, r7, r2
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e005      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	2312      	movs	r3, #18
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	2213      	movs	r2, #19
 8003c4a:	18ba      	adds	r2, r7, r2
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c50:	2311      	movs	r3, #17
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5a:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c60:	4935      	ldr	r1, [pc, #212]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c62:	400a      	ands	r2, r1
 8003c64:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c70:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	2203      	movs	r2, #3
 8003c76:	4393      	bics	r3, r2
 8003c78:	0019      	movs	r1, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c8e:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	4a2a      	ldr	r2, [pc, #168]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	01db      	lsls	r3, r3, #7
 8003caa:	4013      	ands	r3, r2
 8003cac:	d015      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	0899      	lsrs	r1, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	05db      	lsls	r3, r3, #23
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d106      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ccc:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	0249      	lsls	r1, r1, #9
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d016      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	01db      	lsls	r3, r3, #7
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d106      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	0249      	lsls	r1, r1, #9
 8003d10:	430a      	orrs	r2, r1
 8003d12:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003d14:	2312      	movs	r3, #18
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	781b      	ldrb	r3, [r3, #0]
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b006      	add	sp, #24
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	fffffcff 	.word	0xfffffcff
 8003d30:	fffeffff 	.word	0xfffeffff
 8003d34:	00001388 	.word	0x00001388
 8003d38:	efffffff 	.word	0xefffffff
 8003d3c:	ffffcfff 	.word	0xffffcfff
 8003d40:	ffff3fff 	.word	0xffff3fff

08003d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e046      	b.n	8003de4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2288      	movs	r2, #136	; 0x88
 8003d5a:	589b      	ldr	r3, [r3, r2]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d107      	bne.n	8003d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2284      	movs	r2, #132	; 0x84
 8003d64:	2100      	movs	r1, #0
 8003d66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fc ffd2 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2288      	movs	r2, #136	; 0x88
 8003d74:	2124      	movs	r1, #36	; 0x24
 8003d76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	438a      	bics	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 fb72 	bl	8004474 <UART_SetConfig>
 8003d90:	0003      	movs	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e024      	b.n	8003de4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 fccf 	bl	8004748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	490d      	ldr	r1, [pc, #52]	; (8003dec <HAL_UART_Init+0xa8>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	212a      	movs	r1, #42	; 0x2a
 8003dc6:	438a      	bics	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 fd67 	bl	80048b0 <UART_CheckIdleState>
 8003de2:	0003      	movs	r3, r0
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	ffffb7ff 	.word	0xffffb7ff

08003df0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b0aa      	sub	sp, #168	; 0xa8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	22a4      	movs	r2, #164	; 0xa4
 8003e00:	18b9      	adds	r1, r7, r2
 8003e02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	20a0      	movs	r0, #160	; 0xa0
 8003e0c:	1839      	adds	r1, r7, r0
 8003e0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	249c      	movs	r4, #156	; 0x9c
 8003e18:	1939      	adds	r1, r7, r4
 8003e1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	18bb      	adds	r3, r7, r2
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4aa2      	ldr	r2, [pc, #648]	; (80040ac <HAL_UART_IRQHandler+0x2bc>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	2298      	movs	r2, #152	; 0x98
 8003e28:	18bd      	adds	r5, r7, r2
 8003e2a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003e2c:	18bb      	adds	r3, r7, r2
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d11a      	bne.n	8003e6a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d015      	beq.n	8003e6a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e3e:	183b      	adds	r3, r7, r0
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2220      	movs	r2, #32
 8003e44:	4013      	ands	r3, r2
 8003e46:	d105      	bne.n	8003e54 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	055b      	lsls	r3, r3, #21
 8003e50:	4013      	ands	r3, r2
 8003e52:	d00a      	beq.n	8003e6a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d100      	bne.n	8003e5e <HAL_UART_IRQHandler+0x6e>
 8003e5c:	e2dc      	b.n	8004418 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	0010      	movs	r0, r2
 8003e66:	4798      	blx	r3
      }
      return;
 8003e68:	e2d6      	b.n	8004418 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e6a:	2398      	movs	r3, #152	; 0x98
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d100      	bne.n	8003e76 <HAL_UART_IRQHandler+0x86>
 8003e74:	e122      	b.n	80040bc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e76:	239c      	movs	r3, #156	; 0x9c
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a8c      	ldr	r2, [pc, #560]	; (80040b0 <HAL_UART_IRQHandler+0x2c0>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e82:	23a0      	movs	r3, #160	; 0xa0
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a8a      	ldr	r2, [pc, #552]	; (80040b4 <HAL_UART_IRQHandler+0x2c4>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d100      	bne.n	8003e90 <HAL_UART_IRQHandler+0xa0>
 8003e8e:	e115      	b.n	80040bc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e90:	23a4      	movs	r3, #164	; 0xa4
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2201      	movs	r2, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d012      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xd2>
 8003e9c:	23a0      	movs	r3, #160	; 0xa0
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2290      	movs	r2, #144	; 0x90
 8003eb6:	589b      	ldr	r3, [r3, r2]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2190      	movs	r1, #144	; 0x90
 8003ec0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ec2:	23a4      	movs	r3, #164	; 0xa4
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d011      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x102>
 8003ece:	239c      	movs	r3, #156	; 0x9c
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2290      	movs	r2, #144	; 0x90
 8003ee6:	589b      	ldr	r3, [r3, r2]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2190      	movs	r1, #144	; 0x90
 8003ef0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef2:	23a4      	movs	r3, #164	; 0xa4
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2204      	movs	r2, #4
 8003efa:	4013      	ands	r3, r2
 8003efc:	d011      	beq.n	8003f22 <HAL_UART_IRQHandler+0x132>
 8003efe:	239c      	movs	r3, #156	; 0x9c
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2201      	movs	r2, #1
 8003f06:	4013      	ands	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2290      	movs	r2, #144	; 0x90
 8003f16:	589b      	ldr	r3, [r3, r2]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2190      	movs	r1, #144	; 0x90
 8003f20:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f22:	23a4      	movs	r3, #164	; 0xa4
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d017      	beq.n	8003f5e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f2e:	23a0      	movs	r3, #160	; 0xa0
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2220      	movs	r2, #32
 8003f36:	4013      	ands	r3, r2
 8003f38:	d105      	bne.n	8003f46 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f3a:	239c      	movs	r3, #156	; 0x9c
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a5b      	ldr	r2, [pc, #364]	; (80040b0 <HAL_UART_IRQHandler+0x2c0>)
 8003f42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f44:	d00b      	beq.n	8003f5e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2290      	movs	r2, #144	; 0x90
 8003f52:	589b      	ldr	r3, [r3, r2]
 8003f54:	2208      	movs	r2, #8
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2190      	movs	r1, #144	; 0x90
 8003f5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f5e:	23a4      	movs	r3, #164	; 0xa4
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_UART_IRQHandler+0x1a4>
 8003f6c:	23a0      	movs	r3, #160	; 0xa0
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	04db      	lsls	r3, r3, #19
 8003f76:	4013      	ands	r3, r2
 8003f78:	d00c      	beq.n	8003f94 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	0112      	lsls	r2, r2, #4
 8003f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2290      	movs	r2, #144	; 0x90
 8003f88:	589b      	ldr	r3, [r3, r2]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2190      	movs	r1, #144	; 0x90
 8003f92:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2290      	movs	r2, #144	; 0x90
 8003f98:	589b      	ldr	r3, [r3, r2]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d100      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x1b0>
 8003f9e:	e23d      	b.n	800441c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fa0:	23a4      	movs	r3, #164	; 0xa4
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d015      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fac:	23a0      	movs	r3, #160	; 0xa0
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d106      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fb8:	239c      	movs	r3, #156	; 0x9c
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	055b      	lsls	r3, r3, #21
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d008      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	0010      	movs	r0, r2
 8003fd6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2290      	movs	r2, #144	; 0x90
 8003fdc:	589b      	ldr	r3, [r3, r2]
 8003fde:	2194      	movs	r1, #148	; 0x94
 8003fe0:	187a      	adds	r2, r7, r1
 8003fe2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2240      	movs	r2, #64	; 0x40
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d004      	beq.n	8003ffc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2228      	movs	r2, #40	; 0x28
 8003ff8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ffa:	d04c      	beq.n	8004096 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 fd6c 	bl	8004adc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2240      	movs	r2, #64	; 0x40
 800400c:	4013      	ands	r3, r2
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d13c      	bne.n	800408c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004012:	f3ef 8310 	mrs	r3, PRIMASK
 8004016:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	2090      	movs	r0, #144	; 0x90
 800401c:	183a      	adds	r2, r7, r0
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	2301      	movs	r3, #1
 8004022:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2140      	movs	r1, #64	; 0x40
 8004038:	438a      	bics	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	183b      	adds	r3, r7, r0
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2280      	movs	r2, #128	; 0x80
 800404e:	589b      	ldr	r3, [r3, r2]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d016      	beq.n	8004082 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	589b      	ldr	r3, [r3, r2]
 800405a:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <HAL_UART_IRQHandler+0x2c8>)
 800405c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	589b      	ldr	r3, [r3, r2]
 8004064:	0018      	movs	r0, r3
 8004066:	f7fd f967 	bl	8001338 <HAL_DMA_Abort_IT>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d01c      	beq.n	80040a8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	589b      	ldr	r3, [r3, r2]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	5852      	ldr	r2, [r2, r1]
 800407c:	0010      	movs	r0, r2
 800407e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	e012      	b.n	80040a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f9e1 	bl	800444c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408a:	e00d      	b.n	80040a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 f9dc 	bl	800444c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	e008      	b.n	80040a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f000 f9d7 	bl	800444c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2290      	movs	r2, #144	; 0x90
 80040a2:	2100      	movs	r1, #0
 80040a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80040a6:	e1b9      	b.n	800441c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	46c0      	nop			; (mov r8, r8)
    return;
 80040aa:	e1b7      	b.n	800441c <HAL_UART_IRQHandler+0x62c>
 80040ac:	0000080f 	.word	0x0000080f
 80040b0:	10000001 	.word	0x10000001
 80040b4:	04000120 	.word	0x04000120
 80040b8:	08004ba9 	.word	0x08004ba9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d000      	beq.n	80040c6 <HAL_UART_IRQHandler+0x2d6>
 80040c4:	e13e      	b.n	8004344 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040c6:	23a4      	movs	r3, #164	; 0xa4
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2210      	movs	r2, #16
 80040ce:	4013      	ands	r3, r2
 80040d0:	d100      	bne.n	80040d4 <HAL_UART_IRQHandler+0x2e4>
 80040d2:	e137      	b.n	8004344 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040d4:	23a0      	movs	r3, #160	; 0xa0
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2210      	movs	r2, #16
 80040dc:	4013      	ands	r3, r2
 80040de:	d100      	bne.n	80040e2 <HAL_UART_IRQHandler+0x2f2>
 80040e0:	e130      	b.n	8004344 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2210      	movs	r2, #16
 80040e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d000      	beq.n	80040fa <HAL_UART_IRQHandler+0x30a>
 80040f8:	e0a4      	b.n	8004244 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2280      	movs	r2, #128	; 0x80
 80040fe:	589b      	ldr	r3, [r3, r2]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	217e      	movs	r1, #126	; 0x7e
 8004106:	187b      	adds	r3, r7, r1
 8004108:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800410a:	187b      	adds	r3, r7, r1
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d100      	bne.n	8004114 <HAL_UART_IRQHandler+0x324>
 8004112:	e185      	b.n	8004420 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	225c      	movs	r2, #92	; 0x5c
 8004118:	5a9b      	ldrh	r3, [r3, r2]
 800411a:	187a      	adds	r2, r7, r1
 800411c:	8812      	ldrh	r2, [r2, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d300      	bcc.n	8004124 <HAL_UART_IRQHandler+0x334>
 8004122:	e17d      	b.n	8004420 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	187a      	adds	r2, r7, r1
 8004128:	215e      	movs	r1, #94	; 0x5e
 800412a:	8812      	ldrh	r2, [r2, #0]
 800412c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2280      	movs	r2, #128	; 0x80
 8004132:	589b      	ldr	r3, [r3, r2]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2220      	movs	r2, #32
 800413a:	4013      	ands	r3, r2
 800413c:	d170      	bne.n	8004220 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413e:	f3ef 8310 	mrs	r3, PRIMASK
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004146:	67bb      	str	r3, [r7, #120]	; 0x78
 8004148:	2301      	movs	r3, #1
 800414a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414e:	f383 8810 	msr	PRIMASK, r3
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	49b4      	ldr	r1, [pc, #720]	; (8004430 <HAL_UART_IRQHandler+0x640>)
 8004160:	400a      	ands	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	f383 8810 	msr	PRIMASK, r3
}
 800416e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004170:	f3ef 8310 	mrs	r3, PRIMASK
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	677b      	str	r3, [r7, #116]	; 0x74
 800417a:	2301      	movs	r3, #1
 800417c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2101      	movs	r1, #1
 8004192:	438a      	bics	r2, r1
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419c:	f383 8810 	msr	PRIMASK, r3
}
 80041a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a2:	f3ef 8310 	mrs	r3, PRIMASK
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80041a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041aa:	673b      	str	r3, [r7, #112]	; 0x70
 80041ac:	2301      	movs	r3, #1
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2140      	movs	r1, #64	; 0x40
 80041c4:	438a      	bics	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ce:	f383 8810 	msr	PRIMASK, r3
}
 80041d2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	228c      	movs	r2, #140	; 0x8c
 80041d8:	2120      	movs	r1, #32
 80041da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e2:	f3ef 8310 	mrs	r3, PRIMASK
 80041e6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80041e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041ec:	2301      	movs	r3, #1
 80041ee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f2:	f383 8810 	msr	PRIMASK, r3
}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2110      	movs	r1, #16
 8004204:	438a      	bics	r2, r1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420e:	f383 8810 	msr	PRIMASK, r3
}
 8004212:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	589b      	ldr	r3, [r3, r2]
 800421a:	0018      	movs	r0, r3
 800421c:	f7fd f82a 	bl	8001274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	225c      	movs	r2, #92	; 0x5c
 800422a:	5a9a      	ldrh	r2, [r3, r2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	215e      	movs	r1, #94	; 0x5e
 8004230:	5a5b      	ldrh	r3, [r3, r1]
 8004232:	b29b      	uxth	r3, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	0011      	movs	r1, r2
 800423c:	0018      	movs	r0, r3
 800423e:	f000 f90d 	bl	800445c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004242:	e0ed      	b.n	8004420 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	225c      	movs	r2, #92	; 0x5c
 8004248:	5a99      	ldrh	r1, [r3, r2]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	225e      	movs	r2, #94	; 0x5e
 800424e:	5a9b      	ldrh	r3, [r3, r2]
 8004250:	b29a      	uxth	r2, r3
 8004252:	208e      	movs	r0, #142	; 0x8e
 8004254:	183b      	adds	r3, r7, r0
 8004256:	1a8a      	subs	r2, r1, r2
 8004258:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	225e      	movs	r2, #94	; 0x5e
 800425e:	5a9b      	ldrh	r3, [r3, r2]
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d100      	bne.n	8004268 <HAL_UART_IRQHandler+0x478>
 8004266:	e0dd      	b.n	8004424 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004268:	183b      	adds	r3, r7, r0
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d100      	bne.n	8004272 <HAL_UART_IRQHandler+0x482>
 8004270:	e0d8      	b.n	8004424 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004272:	f3ef 8310 	mrs	r3, PRIMASK
 8004276:	60fb      	str	r3, [r7, #12]
  return(result);
 8004278:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800427a:	2488      	movs	r4, #136	; 0x88
 800427c:	193a      	adds	r2, r7, r4
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	2301      	movs	r3, #1
 8004282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f383 8810 	msr	PRIMASK, r3
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4967      	ldr	r1, [pc, #412]	; (8004434 <HAL_UART_IRQHandler+0x644>)
 8004298:	400a      	ands	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	193b      	adds	r3, r7, r4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f383 8810 	msr	PRIMASK, r3
}
 80042a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042aa:	f3ef 8310 	mrs	r3, PRIMASK
 80042ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80042b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042b2:	2484      	movs	r4, #132	; 0x84
 80042b4:	193a      	adds	r2, r7, r4
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	2301      	movs	r3, #1
 80042ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f383 8810 	msr	PRIMASK, r3
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	495a      	ldr	r1, [pc, #360]	; (8004438 <HAL_UART_IRQHandler+0x648>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	193b      	adds	r3, r7, r4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f383 8810 	msr	PRIMASK, r3
}
 80042e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	228c      	movs	r2, #140	; 0x8c
 80042e6:	2120      	movs	r1, #32
 80042e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f6:	f3ef 8310 	mrs	r3, PRIMASK
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fe:	2480      	movs	r4, #128	; 0x80
 8004300:	193a      	adds	r2, r7, r4
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	2301      	movs	r3, #1
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2110      	movs	r1, #16
 800431c:	438a      	bics	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	193b      	adds	r3, r7, r4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	f383 8810 	msr	PRIMASK, r3
}
 800432c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004334:	183b      	adds	r3, r7, r0
 8004336:	881a      	ldrh	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f000 f88d 	bl	800445c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004342:	e06f      	b.n	8004424 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004344:	23a4      	movs	r3, #164	; 0xa4
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	035b      	lsls	r3, r3, #13
 800434e:	4013      	ands	r3, r2
 8004350:	d010      	beq.n	8004374 <HAL_UART_IRQHandler+0x584>
 8004352:	239c      	movs	r3, #156	; 0x9c
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	03db      	lsls	r3, r3, #15
 800435c:	4013      	ands	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	0352      	lsls	r2, r2, #13
 8004368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 fc5e 	bl	8004c2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004372:	e05a      	b.n	800442a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004374:	23a4      	movs	r3, #164	; 0xa4
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2280      	movs	r2, #128	; 0x80
 800437c:	4013      	ands	r3, r2
 800437e:	d016      	beq.n	80043ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004380:	23a0      	movs	r3, #160	; 0xa0
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2280      	movs	r2, #128	; 0x80
 8004388:	4013      	ands	r3, r2
 800438a:	d106      	bne.n	800439a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800438c:	239c      	movs	r3, #156	; 0x9c
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	4013      	ands	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d042      	beq.n	8004428 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	0010      	movs	r0, r2
 80043aa:	4798      	blx	r3
    }
    return;
 80043ac:	e03c      	b.n	8004428 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ae:	23a4      	movs	r3, #164	; 0xa4
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2240      	movs	r2, #64	; 0x40
 80043b6:	4013      	ands	r3, r2
 80043b8:	d00a      	beq.n	80043d0 <HAL_UART_IRQHandler+0x5e0>
 80043ba:	23a0      	movs	r3, #160	; 0xa0
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2240      	movs	r2, #64	; 0x40
 80043c2:	4013      	ands	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 fc04 	bl	8004bd6 <UART_EndTransmit_IT>
    return;
 80043ce:	e02c      	b.n	800442a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80043d0:	23a4      	movs	r3, #164	; 0xa4
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	4013      	ands	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <HAL_UART_IRQHandler+0x606>
 80043de:	23a0      	movs	r3, #160	; 0xa0
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	05db      	lsls	r3, r3, #23
 80043e8:	4013      	ands	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 fc2d 	bl	8004c4e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043f4:	e019      	b.n	800442a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043f6:	23a4      	movs	r3, #164	; 0xa4
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	045b      	lsls	r3, r3, #17
 8004400:	4013      	ands	r3, r2
 8004402:	d012      	beq.n	800442a <HAL_UART_IRQHandler+0x63a>
 8004404:	23a0      	movs	r3, #160	; 0xa0
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	da0d      	bge.n	800442a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0018      	movs	r0, r3
 8004412:	f000 fc14 	bl	8004c3e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004416:	e008      	b.n	800442a <HAL_UART_IRQHandler+0x63a>
      return;
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	e006      	b.n	800442a <HAL_UART_IRQHandler+0x63a>
    return;
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	e004      	b.n	800442a <HAL_UART_IRQHandler+0x63a>
      return;
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	e002      	b.n	800442a <HAL_UART_IRQHandler+0x63a>
      return;
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	e000      	b.n	800442a <HAL_UART_IRQHandler+0x63a>
    return;
 8004428:	46c0      	nop			; (mov r8, r8)
  }
}
 800442a:	46bd      	mov	sp, r7
 800442c:	b02a      	add	sp, #168	; 0xa8
 800442e:	bdb0      	pop	{r4, r5, r7, pc}
 8004430:	fffffeff 	.word	0xfffffeff
 8004434:	fffffedf 	.word	0xfffffedf
 8004438:	effffffe 	.word	0xeffffffe

0800443c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b002      	add	sp, #8
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b002      	add	sp, #8
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	000a      	movs	r2, r1
 8004466:	1cbb      	adds	r3, r7, #2
 8004468:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	46bd      	mov	sp, r7
 800446e:	b002      	add	sp, #8
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447c:	231a      	movs	r3, #26
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4aa1      	ldr	r2, [pc, #644]	; (8004728 <UART_SetConfig+0x2b4>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	0019      	movs	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a9c      	ldr	r2, [pc, #624]	; (800472c <UART_SetConfig+0x2b8>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a93      	ldr	r2, [pc, #588]	; (8004730 <UART_SetConfig+0x2bc>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	220f      	movs	r2, #15
 80044f8:	4393      	bics	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a89      	ldr	r2, [pc, #548]	; (8004734 <UART_SetConfig+0x2c0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d127      	bne.n	8004562 <UART_SetConfig+0xee>
 8004512:	4b89      	ldr	r3, [pc, #548]	; (8004738 <UART_SetConfig+0x2c4>)
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	2203      	movs	r2, #3
 8004518:	4013      	ands	r3, r2
 800451a:	2b03      	cmp	r3, #3
 800451c:	d017      	beq.n	800454e <UART_SetConfig+0xda>
 800451e:	d81b      	bhi.n	8004558 <UART_SetConfig+0xe4>
 8004520:	2b02      	cmp	r3, #2
 8004522:	d00a      	beq.n	800453a <UART_SetConfig+0xc6>
 8004524:	d818      	bhi.n	8004558 <UART_SetConfig+0xe4>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <UART_SetConfig+0xbc>
 800452a:	2b01      	cmp	r3, #1
 800452c:	d00a      	beq.n	8004544 <UART_SetConfig+0xd0>
 800452e:	e013      	b.n	8004558 <UART_SetConfig+0xe4>
 8004530:	231b      	movs	r3, #27
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e021      	b.n	800457e <UART_SetConfig+0x10a>
 800453a:	231b      	movs	r3, #27
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2202      	movs	r2, #2
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e01c      	b.n	800457e <UART_SetConfig+0x10a>
 8004544:	231b      	movs	r3, #27
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2204      	movs	r2, #4
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e017      	b.n	800457e <UART_SetConfig+0x10a>
 800454e:	231b      	movs	r3, #27
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2208      	movs	r2, #8
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e012      	b.n	800457e <UART_SetConfig+0x10a>
 8004558:	231b      	movs	r3, #27
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	2210      	movs	r2, #16
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e00d      	b.n	800457e <UART_SetConfig+0x10a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a75      	ldr	r2, [pc, #468]	; (800473c <UART_SetConfig+0x2c8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d104      	bne.n	8004576 <UART_SetConfig+0x102>
 800456c:	231b      	movs	r3, #27
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e003      	b.n	800457e <UART_SetConfig+0x10a>
 8004576:	231b      	movs	r3, #27
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2210      	movs	r2, #16
 800457c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	429a      	cmp	r2, r3
 8004588:	d000      	beq.n	800458c <UART_SetConfig+0x118>
 800458a:	e065      	b.n	8004658 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800458c:	231b      	movs	r3, #27
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d015      	beq.n	80045c2 <UART_SetConfig+0x14e>
 8004596:	dc18      	bgt.n	80045ca <UART_SetConfig+0x156>
 8004598:	2b04      	cmp	r3, #4
 800459a:	d00d      	beq.n	80045b8 <UART_SetConfig+0x144>
 800459c:	dc15      	bgt.n	80045ca <UART_SetConfig+0x156>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <UART_SetConfig+0x134>
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d005      	beq.n	80045b2 <UART_SetConfig+0x13e>
 80045a6:	e010      	b.n	80045ca <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a8:	f7ff fa90 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80045ac:	0003      	movs	r3, r0
 80045ae:	617b      	str	r3, [r7, #20]
        break;
 80045b0:	e012      	b.n	80045d8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b2:	4b63      	ldr	r3, [pc, #396]	; (8004740 <UART_SetConfig+0x2cc>)
 80045b4:	617b      	str	r3, [r7, #20]
        break;
 80045b6:	e00f      	b.n	80045d8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b8:	f7ff f9fc 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 80045bc:	0003      	movs	r3, r0
 80045be:	617b      	str	r3, [r7, #20]
        break;
 80045c0:	e00a      	b.n	80045d8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	617b      	str	r3, [r7, #20]
        break;
 80045c8:	e006      	b.n	80045d8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ce:	231a      	movs	r3, #26
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	2201      	movs	r2, #1
 80045d4:	701a      	strb	r2, [r3, #0]
        break;
 80045d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d100      	bne.n	80045e0 <UART_SetConfig+0x16c>
 80045de:	e08d      	b.n	80046fc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e4:	4b57      	ldr	r3, [pc, #348]	; (8004744 <UART_SetConfig+0x2d0>)
 80045e6:	0052      	lsls	r2, r2, #1
 80045e8:	5ad3      	ldrh	r3, [r2, r3]
 80045ea:	0019      	movs	r1, r3
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f7fb fd87 	bl	8000100 <__udivsi3>
 80045f2:	0003      	movs	r3, r0
 80045f4:	005a      	lsls	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	18d2      	adds	r2, r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	0019      	movs	r1, r3
 8004604:	0010      	movs	r0, r2
 8004606:	f7fb fd7b 	bl	8000100 <__udivsi3>
 800460a:	0003      	movs	r3, r0
 800460c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b0f      	cmp	r3, #15
 8004612:	d91c      	bls.n	800464e <UART_SetConfig+0x1da>
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	025b      	lsls	r3, r3, #9
 800461a:	429a      	cmp	r2, r3
 800461c:	d217      	bcs.n	800464e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	b29a      	uxth	r2, r3
 8004622:	200e      	movs	r0, #14
 8004624:	183b      	adds	r3, r7, r0
 8004626:	210f      	movs	r1, #15
 8004628:	438a      	bics	r2, r1
 800462a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	b29b      	uxth	r3, r3
 8004632:	2207      	movs	r2, #7
 8004634:	4013      	ands	r3, r2
 8004636:	b299      	uxth	r1, r3
 8004638:	183b      	adds	r3, r7, r0
 800463a:	183a      	adds	r2, r7, r0
 800463c:	8812      	ldrh	r2, [r2, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	183a      	adds	r2, r7, r0
 8004648:	8812      	ldrh	r2, [r2, #0]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	e056      	b.n	80046fc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800464e:	231a      	movs	r3, #26
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e051      	b.n	80046fc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004658:	231b      	movs	r3, #27
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b08      	cmp	r3, #8
 8004660:	d015      	beq.n	800468e <UART_SetConfig+0x21a>
 8004662:	dc18      	bgt.n	8004696 <UART_SetConfig+0x222>
 8004664:	2b04      	cmp	r3, #4
 8004666:	d00d      	beq.n	8004684 <UART_SetConfig+0x210>
 8004668:	dc15      	bgt.n	8004696 <UART_SetConfig+0x222>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <UART_SetConfig+0x200>
 800466e:	2b02      	cmp	r3, #2
 8004670:	d005      	beq.n	800467e <UART_SetConfig+0x20a>
 8004672:	e010      	b.n	8004696 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004674:	f7ff fa2a 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8004678:	0003      	movs	r3, r0
 800467a:	617b      	str	r3, [r7, #20]
        break;
 800467c:	e012      	b.n	80046a4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800467e:	4b30      	ldr	r3, [pc, #192]	; (8004740 <UART_SetConfig+0x2cc>)
 8004680:	617b      	str	r3, [r7, #20]
        break;
 8004682:	e00f      	b.n	80046a4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004684:	f7ff f996 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004688:	0003      	movs	r3, r0
 800468a:	617b      	str	r3, [r7, #20]
        break;
 800468c:	e00a      	b.n	80046a4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	617b      	str	r3, [r7, #20]
        break;
 8004694:	e006      	b.n	80046a4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800469a:	231a      	movs	r3, #26
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
        break;
 80046a2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d028      	beq.n	80046fc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ae:	4b25      	ldr	r3, [pc, #148]	; (8004744 <UART_SetConfig+0x2d0>)
 80046b0:	0052      	lsls	r2, r2, #1
 80046b2:	5ad3      	ldrh	r3, [r2, r3]
 80046b4:	0019      	movs	r1, r3
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f7fb fd22 	bl	8000100 <__udivsi3>
 80046bc:	0003      	movs	r3, r0
 80046be:	001a      	movs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	085b      	lsrs	r3, r3, #1
 80046c6:	18d2      	adds	r2, r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	0019      	movs	r1, r3
 80046ce:	0010      	movs	r0, r2
 80046d0:	f7fb fd16 	bl	8000100 <__udivsi3>
 80046d4:	0003      	movs	r3, r0
 80046d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	d90a      	bls.n	80046f4 <UART_SetConfig+0x280>
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	025b      	lsls	r3, r3, #9
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d205      	bcs.n	80046f4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	e003      	b.n	80046fc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80046f4:	231a      	movs	r3, #26
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	226a      	movs	r2, #106	; 0x6a
 8004700:	2101      	movs	r1, #1
 8004702:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2268      	movs	r2, #104	; 0x68
 8004708:	2101      	movs	r1, #1
 800470a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004718:	231a      	movs	r3, #26
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	781b      	ldrb	r3, [r3, #0]
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b008      	add	sp, #32
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	cfff69f3 	.word	0xcfff69f3
 800472c:	ffffcfff 	.word	0xffffcfff
 8004730:	11fff4ff 	.word	0x11fff4ff
 8004734:	40013800 	.word	0x40013800
 8004738:	40021000 	.word	0x40021000
 800473c:	40004400 	.word	0x40004400
 8004740:	00f42400 	.word	0x00f42400
 8004744:	08004f64 	.word	0x08004f64

08004748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	2201      	movs	r2, #1
 8004756:	4013      	ands	r3, r2
 8004758:	d00b      	beq.n	8004772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a4a      	ldr	r2, [pc, #296]	; (800488c <UART_AdvFeatureConfig+0x144>)
 8004762:	4013      	ands	r3, r2
 8004764:	0019      	movs	r1, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	2202      	movs	r2, #2
 8004778:	4013      	ands	r3, r2
 800477a:	d00b      	beq.n	8004794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4a43      	ldr	r2, [pc, #268]	; (8004890 <UART_AdvFeatureConfig+0x148>)
 8004784:	4013      	ands	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	2204      	movs	r2, #4
 800479a:	4013      	ands	r3, r2
 800479c:	d00b      	beq.n	80047b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <UART_AdvFeatureConfig+0x14c>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	0019      	movs	r1, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	2208      	movs	r2, #8
 80047bc:	4013      	ands	r3, r2
 80047be:	d00b      	beq.n	80047d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4a34      	ldr	r2, [pc, #208]	; (8004898 <UART_AdvFeatureConfig+0x150>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	2210      	movs	r2, #16
 80047de:	4013      	ands	r3, r2
 80047e0:	d00b      	beq.n	80047fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a2c      	ldr	r2, [pc, #176]	; (800489c <UART_AdvFeatureConfig+0x154>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	2220      	movs	r2, #32
 8004800:	4013      	ands	r3, r2
 8004802:	d00b      	beq.n	800481c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <UART_AdvFeatureConfig+0x158>)
 800480c:	4013      	ands	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	2240      	movs	r2, #64	; 0x40
 8004822:	4013      	ands	r3, r2
 8004824:	d01d      	beq.n	8004862 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <UART_AdvFeatureConfig+0x15c>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	035b      	lsls	r3, r3, #13
 8004846:	429a      	cmp	r2, r3
 8004848:	d10b      	bne.n	8004862 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <UART_AdvFeatureConfig+0x160>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	4013      	ands	r3, r2
 800486a:	d00b      	beq.n	8004884 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4a0e      	ldr	r2, [pc, #56]	; (80048ac <UART_AdvFeatureConfig+0x164>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fffdffff 	.word	0xfffdffff
 8004890:	fffeffff 	.word	0xfffeffff
 8004894:	fffbffff 	.word	0xfffbffff
 8004898:	ffff7fff 	.word	0xffff7fff
 800489c:	ffffefff 	.word	0xffffefff
 80048a0:	ffffdfff 	.word	0xffffdfff
 80048a4:	ffefffff 	.word	0xffefffff
 80048a8:	ff9fffff 	.word	0xff9fffff
 80048ac:	fff7ffff 	.word	0xfff7ffff

080048b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2290      	movs	r2, #144	; 0x90
 80048bc:	2100      	movs	r1, #0
 80048be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c0:	f7fc fb66 	bl	8000f90 <HAL_GetTick>
 80048c4:	0003      	movs	r3, r0
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2208      	movs	r2, #8
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d10c      	bne.n	80048f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2280      	movs	r2, #128	; 0x80
 80048da:	0391      	lsls	r1, r2, #14
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <UART_CheckIdleState+0x98>)
 80048e0:	9200      	str	r2, [sp, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f000 f832 	bl	800494c <UART_WaitOnFlagUntilTimeout>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d001      	beq.n	80048f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e026      	b.n	800493e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2204      	movs	r2, #4
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d10c      	bne.n	8004918 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	03d1      	lsls	r1, r2, #15
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4a10      	ldr	r2, [pc, #64]	; (8004948 <UART_CheckIdleState+0x98>)
 8004908:	9200      	str	r2, [sp, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	f000 f81e 	bl	800494c <UART_WaitOnFlagUntilTimeout>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d001      	beq.n	8004918 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e012      	b.n	800493e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2288      	movs	r2, #136	; 0x88
 800491c:	2120      	movs	r1, #32
 800491e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	228c      	movs	r2, #140	; 0x8c
 8004924:	2120      	movs	r1, #32
 8004926:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2284      	movs	r2, #132	; 0x84
 8004938:	2100      	movs	r1, #0
 800493a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	01ffffff 	.word	0x01ffffff

0800494c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b094      	sub	sp, #80	; 0x50
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	1dfb      	adds	r3, r7, #7
 800495a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	e0a7      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004960:	3301      	adds	r3, #1
 8004962:	d100      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004964:	e0a3      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7fc fb13 	bl	8000f90 <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <UART_WaitOnFlagUntilTimeout+0x30>
 8004976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004978:	2b00      	cmp	r3, #0
 800497a:	d13f      	bne.n	80049fc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004984:	647b      	str	r3, [r7, #68]	; 0x44
 8004986:	2301      	movs	r3, #1
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	494e      	ldr	r1, [pc, #312]	; (8004ad8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ae:	f3ef 8310 	mrs	r3, PRIMASK
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
 80049b8:	2301      	movs	r3, #1
 80049ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	438a      	bics	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2288      	movs	r2, #136	; 0x88
 80049e4:	2120      	movs	r1, #32
 80049e6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	228c      	movs	r2, #140	; 0x8c
 80049ec:	2120      	movs	r1, #32
 80049ee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2284      	movs	r2, #132	; 0x84
 80049f4:	2100      	movs	r1, #0
 80049f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e069      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2204      	movs	r2, #4
 8004a04:	4013      	ands	r3, r2
 8004a06:	d052      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	401a      	ands	r2, r3
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d148      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a26:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8004a2c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	2301      	movs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f383 8810 	msr	PRIMASK, r3
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4924      	ldr	r1, [pc, #144]	; (8004ad8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a58:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a5e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a62:	2301      	movs	r3, #1
 8004a64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	f383 8810 	msr	PRIMASK, r3
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	438a      	bics	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	f383 8810 	msr	PRIMASK, r3
}
 8004a88:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2288      	movs	r2, #136	; 0x88
 8004a8e:	2120      	movs	r1, #32
 8004a90:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	228c      	movs	r2, #140	; 0x8c
 8004a96:	2120      	movs	r1, #32
 8004a98:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2290      	movs	r2, #144	; 0x90
 8004a9e:	2120      	movs	r1, #32
 8004aa0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2284      	movs	r2, #132	; 0x84
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e010      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	425a      	negs	r2, r3
 8004abe:	4153      	adcs	r3, r2
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	1dfb      	adds	r3, r7, #7
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d100      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0x182>
 8004acc:	e747      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b014      	add	sp, #80	; 0x50
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	fffffe5f 	.word	0xfffffe5f

08004adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08e      	sub	sp, #56	; 0x38
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8004aea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4926      	ldr	r1, [pc, #152]	; (8004ba0 <UART_EndRxTransfer+0xc4>)
 8004b06:	400a      	ands	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f383 8810 	msr	PRIMASK, r3
}
 8004b14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b16:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b20:	2301      	movs	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	491b      	ldr	r1, [pc, #108]	; (8004ba4 <UART_EndRxTransfer+0xc8>)
 8004b38:	400a      	ands	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d118      	bne.n	8004b82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b50:	f3ef 8310 	mrs	r3, PRIMASK
 8004b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			; (mov r8, r8)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2110      	movs	r1, #16
 8004b72:	438a      	bics	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f383 8810 	msr	PRIMASK, r3
}
 8004b80:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	228c      	movs	r2, #140	; 0x8c
 8004b86:	2120      	movs	r1, #32
 8004b88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b00e      	add	sp, #56	; 0x38
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	fffffedf 	.word	0xfffffedf
 8004ba4:	effffffe 	.word	0xeffffffe

08004ba8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	225e      	movs	r2, #94	; 0x5e
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2256      	movs	r2, #86	; 0x56
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7ff fc3f 	bl	800444c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bde:	f3ef 8310 	mrs	r3, PRIMASK
 8004be2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	2301      	movs	r3, #1
 8004bea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f383 8810 	msr	PRIMASK, r3
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2140      	movs	r1, #64	; 0x40
 8004c00:	438a      	bics	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2288      	movs	r2, #136	; 0x88
 8004c14:	2120      	movs	r1, #32
 8004c16:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7ff fc0b 	bl	800443c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b006      	add	sp, #24
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b002      	add	sp, #8
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b002      	add	sp, #8
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2284      	movs	r2, #132	; 0x84
 8004c6c:	5c9b      	ldrb	r3, [r3, r2]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e027      	b.n	8004cc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2284      	movs	r2, #132	; 0x84
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2288      	movs	r2, #136	; 0x88
 8004c82:	2124      	movs	r1, #36	; 0x24
 8004c84:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2101      	movs	r1, #1
 8004c9a:	438a      	bics	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a0b      	ldr	r2, [pc, #44]	; (8004cd0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2288      	movs	r2, #136	; 0x88
 8004cb8:	2120      	movs	r1, #32
 8004cba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2284      	movs	r2, #132	; 0x84
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b004      	add	sp, #16
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	dfffffff 	.word	0xdfffffff

08004cd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2284      	movs	r2, #132	; 0x84
 8004ce2:	5c9b      	ldrb	r3, [r3, r2]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e02e      	b.n	8004d4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2284      	movs	r2, #132	; 0x84
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2288      	movs	r2, #136	; 0x88
 8004cf8:	2124      	movs	r1, #36	; 0x24
 8004cfa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2101      	movs	r1, #1
 8004d10:	438a      	bics	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	08d9      	lsrs	r1, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f000 f854 	bl	8004dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2288      	movs	r2, #136	; 0x88
 8004d3c:	2120      	movs	r1, #32
 8004d3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2284      	movs	r2, #132	; 0x84
 8004d44:	2100      	movs	r1, #0
 8004d46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b004      	add	sp, #16
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2284      	movs	r2, #132	; 0x84
 8004d62:	5c9b      	ldrb	r3, [r3, r2]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e02f      	b.n	8004dcc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2284      	movs	r2, #132	; 0x84
 8004d70:	2101      	movs	r1, #1
 8004d72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2288      	movs	r2, #136	; 0x88
 8004d78:	2124      	movs	r1, #36	; 0x24
 8004d7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2101      	movs	r1, #1
 8004d90:	438a      	bics	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4a0e      	ldr	r2, [pc, #56]	; (8004dd4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	0019      	movs	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f000 f813 	bl	8004dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2288      	movs	r2, #136	; 0x88
 8004dbe:	2120      	movs	r1, #32
 8004dc0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2284      	movs	r2, #132	; 0x84
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	0018      	movs	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b004      	add	sp, #16
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	f1ffffff 	.word	0xf1ffffff

08004dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d108      	bne.n	8004dfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	226a      	movs	r2, #106	; 0x6a
 8004dec:	2101      	movs	r1, #1
 8004dee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2268      	movs	r2, #104	; 0x68
 8004df4:	2101      	movs	r1, #1
 8004df6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004df8:	e043      	b.n	8004e82 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dfa:	260f      	movs	r6, #15
 8004dfc:	19bb      	adds	r3, r7, r6
 8004dfe:	2208      	movs	r2, #8
 8004e00:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e02:	200e      	movs	r0, #14
 8004e04:	183b      	adds	r3, r7, r0
 8004e06:	2208      	movs	r2, #8
 8004e08:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	0e5b      	lsrs	r3, r3, #25
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	240d      	movs	r4, #13
 8004e16:	193b      	adds	r3, r7, r4
 8004e18:	2107      	movs	r1, #7
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0f5b      	lsrs	r3, r3, #29
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	250c      	movs	r5, #12
 8004e2a:	197b      	adds	r3, r7, r5
 8004e2c:	2107      	movs	r1, #7
 8004e2e:	400a      	ands	r2, r1
 8004e30:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e32:	183b      	adds	r3, r7, r0
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	197a      	adds	r2, r7, r5
 8004e38:	7812      	ldrb	r2, [r2, #0]
 8004e3a:	4914      	ldr	r1, [pc, #80]	; (8004e8c <UARTEx_SetNbDataToProcess+0xb4>)
 8004e3c:	5c8a      	ldrb	r2, [r1, r2]
 8004e3e:	435a      	muls	r2, r3
 8004e40:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e42:	197b      	adds	r3, r7, r5
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	f7fb f9e2 	bl	8000214 <__divsi3>
 8004e50:	0003      	movs	r3, r0
 8004e52:	b299      	uxth	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	226a      	movs	r2, #106	; 0x6a
 8004e58:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e5a:	19bb      	adds	r3, r7, r6
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	193a      	adds	r2, r7, r4
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	490a      	ldr	r1, [pc, #40]	; (8004e8c <UARTEx_SetNbDataToProcess+0xb4>)
 8004e64:	5c8a      	ldrb	r2, [r1, r2]
 8004e66:	435a      	muls	r2, r3
 8004e68:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e6a:	193b      	adds	r3, r7, r4
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e72:	0019      	movs	r1, r3
 8004e74:	f7fb f9ce 	bl	8000214 <__divsi3>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	b299      	uxth	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2268      	movs	r2, #104	; 0x68
 8004e80:	5299      	strh	r1, [r3, r2]
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b005      	add	sp, #20
 8004e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	08004f7c 	.word	0x08004f7c
 8004e90:	08004f84 	.word	0x08004f84

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	2600      	movs	r6, #0
 8004e98:	4d0c      	ldr	r5, [pc, #48]	; (8004ecc <__libc_init_array+0x38>)
 8004e9a:	4c0d      	ldr	r4, [pc, #52]	; (8004ed0 <__libc_init_array+0x3c>)
 8004e9c:	1b64      	subs	r4, r4, r5
 8004e9e:	10a4      	asrs	r4, r4, #2
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	2600      	movs	r6, #0
 8004ea6:	f000 f821 	bl	8004eec <_init>
 8004eaa:	4d0a      	ldr	r5, [pc, #40]	; (8004ed4 <__libc_init_array+0x40>)
 8004eac:	4c0a      	ldr	r4, [pc, #40]	; (8004ed8 <__libc_init_array+0x44>)
 8004eae:	1b64      	subs	r4, r4, r5
 8004eb0:	10a4      	asrs	r4, r4, #2
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	00b3      	lsls	r3, r6, #2
 8004eba:	58eb      	ldr	r3, [r5, r3]
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	00b3      	lsls	r3, r6, #2
 8004ec4:	58eb      	ldr	r3, [r5, r3]
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	08004f8c 	.word	0x08004f8c
 8004ed0:	08004f8c 	.word	0x08004f8c
 8004ed4:	08004f8c 	.word	0x08004f8c
 8004ed8:	08004f90 	.word	0x08004f90

08004edc <memset>:
 8004edc:	0003      	movs	r3, r0
 8004ede:	1882      	adds	r2, r0, r2
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	7019      	strb	r1, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <_init>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr

08004ef8 <_fini>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efe:	bc08      	pop	{r3}
 8004f00:	469e      	mov	lr, r3
 8004f02:	4770      	bx	lr
